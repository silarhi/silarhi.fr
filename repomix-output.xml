This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  copilot-instructions.md
public/
  browserconfig.xml
  safari-pinned-tab.svg
  site.webmanifest
src/
  app/
    conditions-generales-de-vente/
      page.tsx
    mentions-legales/
      page.tsx
    projets/
      [slug]/
        page.tsx
      tag/
        [tag]/
          page.tsx
      page.tsx
    fonts.js
    fonts.ts
    globals.css
    index.module.scss
    layout.tsx
    page.tsx
    sitemap.ts
  components/
    ActiveLink/
      index.tsx
    Button/
      index.tsx
    CallToAction/
      index.module.scss
      index.tsx
    CallToActionButton/
      index.tsx
    ContactForm/
      index.tsx
    Footer/
      index.module.scss
      index.tsx
    Form/
      Group.tsx
      Help.tsx
      Input.tsx
      InputIcon.tsx
      Label.tsx
      Textarea.tsx
    HeroTitle/
      index.tsx
    Icons/
      index.tsx
    IconWrapper/
      index.module.scss
      index.tsx
    Layout/
      DefaultLayout/
        index.module.scss
        index.tsx
    MDXImage/
      index.tsx
    Modal/
      index.tsx
    Navbar/
      index.module.scss
      index.tsx
    ProjectCard/
      index.tsx
    Section/
      index.module.scss
      index.tsx
    SectionHeader/
      index.tsx
    Title/
      index.tsx
  content/
    projects/
      api-iris.mdx
      api-tracking.mdx
      front-iris.mdx
    tags/
      react.md
      symfony.md
  hooks/
    reducer.ts
  types/
    globals.d.ts
  utils/
    array.ts
    dates.ts
    employees.ts
    lib.ts
    project.ts
    tags.ts
styles/
  components/
    _button.scss
    _card.scss
    _containers.scss
    _input-icon.scss
    _list-group.scss
    _navbar.scss
    _offcanvas.scss
  _core.scss
  _variables.scss
  app.scss
  globals.css
  Home.module.css
.gitignore
.prettierrc
eslint.config.mjs
jsconfig.json
next-env.d.ts
next.config.mjs
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="styles/globals.css">
html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}
</file>

<file path="styles/Home.module.css">
.container {
  padding: 0 2rem;
}

.main {
  min-height: 100vh;
  padding: 4rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.footer {
  display: flex;
  flex: 1;
  padding: 2rem 0;
  border-top: 1px solid #eaeaea;
  justify-content: center;
  align-items: center;
}

.footer a {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 4rem;
}

.title,
.description {
  text-align: center;
}

.description {
  margin: 4rem 0;
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background: #fafafa;
  border-radius: 5px;
  padding: 0.75rem;
  font-size: 1.1rem;
  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
    Bitstream Vera Sans Mono, Courier New, monospace;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  max-width: 800px;
}

.card {
  margin: 1rem;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  max-width: 300px;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h2 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}

.logo {
  height: 1em;
  margin-left: 0.5rem;
}

@media (max-width: 600px) {
  .grid {
    width: 100%;
    flex-direction: column;
  }
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

# vercel
.vercel
</file>

<file path=".github/copilot-instructions.md">
# 🧠 GitHub Copilot Instructions for SILARHI.fr

## 🏗️ Project Overview

This repository contains the source code for **SILARHI.fr**, the official website of SILARHI, a web development agency based in Toulouse, France.  
The site showcases our services, portfolio, and values, and acts as both a marketing showcase and a demonstration of our technical quality.

The goal is to maintain **clean, modern, and performant code**, with attention to accessibility, SEO, and developer experience.

---

## 🧰 Tech Stack

- **Frontend:** Next.js (React + TypeScript)
- **Styling:** Tailwind CSS + shadcn/ui
- **Content:** Markdown / MDX files for blog and portfolio entries
- **Hosting:** Cloudflare Pages (static export)
- **Analytics:** Plausible
- **CI/CD:** GitHub Actions → Cloudflare Pages

---

## 🧩 Coding Conventions

### General
- Prefer **functional components** with TypeScript.
- Follow the **ESLint + Prettier** configuration provided.
- Write **self-documenting code**: clear variable names > comments.
- Use **async/await** over `.then()` syntax.

### Components
- Each component should live in its own file under `src/components/`.
- Keep components **stateless** when possible.
- Use **props interfaces** for all components.
- Export components as **default** unless there’s a good reason not to.

### Styling
- Use **Tailwind CSS** utility classes.
- For complex compositions, use **class-variance-authority (cva)** or component-level style objects.
- Follow **SILARHI design system** (rounded corners, soft shadows, generous spacing).

### Accessibility & SEO
- Always use semantic HTML (e.g., `<button>`, `<nav>`, `<header>`).
- Include alt text for images.
- Optimize metadata via Next.js `metadata` API.
- Use `aria-*` attributes when relevant.

### Git & Project Structure
- Branch naming: `feature/…`, `fix/…`, `content/…`
- Commit messages: imperative style (“Add hero section” not “Added…”).
- Pull requests should include a short description of the feature or fix.

---

## 🧪 Copilot Guidance

When generating code, **Copilot should**:
- Prefer **concise, readable code** over clever tricks.
- Follow the structure and conventions of existing files.
- Suggest **reusable UI components** instead of duplicating layout.
- Provide **Tailwind utility-first** examples.
- When writing text content (e.g., meta descriptions), use **a professional yet friendly tone** consistent with SILARHI’s voice.

---

## 🧭 Example Prompts

> “Add a new section on the homepage showcasing recent projects.”  
> “Create a React component for a testimonial carousel with Tailwind and motion effects.”  
> “Generate MDX content for a new blog post about Symfony best practices.”  
> “Suggest meta tags for the contact page.”

---

## 💡 Philosophy

> Build with elegance, simplicity, and technical excellence.  
> The SILARHI website is both a marketing showcase and a reflection of our code quality.
</file>

<file path="public/browserconfig.xml">
<?xml version="1.0" encoding="utf-8"?>
<browserconfig>
    <msapplication>
        <tile>
            <square70x70logo src="/mstile-70x70.png"/>
            <square150x150logo src="/mstile-150x150.png"/>
            <square310x310logo src="/mstile-310x310.png"/>
            <wide310x150logo src="/mstile-310x150.png"/>
            <TileColor>#2b5797</TileColor>
        </tile>
    </msapplication>
</browserconfig>
</file>

<file path="public/safari-pinned-tab.svg">
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
 width="4096.000000pt" height="4096.000000pt" viewBox="0 0 4096.000000 4096.000000"
 preserveAspectRatio="xMidYMid meet">
<metadata>
Created by potrace 1.14, written by Peter Selinger 2001-2017
</metadata>
<g transform="translate(0.000000,4096.000000) scale(0.100000,-0.100000)"
fill="#000000" stroke="none">
<path d="M20407 38324 c-1 -1 -55 -5 -120 -8 -65 -4 -134 -9 -155 -11 -101
-12 -134 -17 -217 -30 -49 -8 -102 -17 -117 -20 -44 -8 -312 -76 -328 -82 -8
-4 -17 -7 -20 -8 -37 -9 -201 -69 -295 -108 -559 -229 -1080 -628 -1453 -1112
-183 -238 -331 -491 -449 -765 -87 -202 -172 -472 -212 -670 -19 -94 -21 -103
-31 -165 -9 -56 -14 -100 -25 -185 -18 -154 -23 -391 -12 -590 7 -127 13 -183
43 -380 5 -30 57 -266 69 -310 37 -139 129 -406 146 -425 5 -5 9 -15 9 -23 0
-24 176 -373 228 -452 9 -14 23 -37 32 -52 8 -16 52 -81 97 -145 605 -867
1569 -1423 2623 -1511 167 -14 582 -6 690 13 14 2 43 6 65 9 61 7 115 16 171
27 28 5 64 12 80 15 16 3 37 7 46 10 9 3 25 6 35 8 80 16 391 112 458 141 79
35 178 75 180 73 1 -2 14 -23 28 -48 64 -112 128 -221 172 -295 41 -69 45 -75
89 -152 22 -37 59 -102 84 -143 41 -69 132 -225 152 -260 5 -8 66 -113 137
-232 70 -120 133 -226 138 -235 6 -10 28 -49 50 -86 22 -37 50 -85 61 -105 12
-20 68 -116 125 -212 56 -96 112 -192 123 -212 12 -20 51 -88 87 -150 37 -62
75 -129 86 -148 11 -19 76 -132 145 -250 69 -118 143 -248 166 -288 l42 -73
-49 -62 c-52 -67 -127 -188 -155 -252 -10 -22 -23 -51 -30 -65 -6 -14 -23 -60
-36 -102 l-24 -78 -2811 0 -2810 0 -23 73 c-37 119 -156 366 -191 397 -4 3
-25 30 -48 61 -118 159 -309 313 -504 407 -92 45 -194 85 -246 97 -73 18 -165
37 -203 42 -105 14 -387 6 -452 -13 -17 -5 -42 -10 -90 -19 -45 -8 -199 -65
-278 -103 -144 -68 -332 -206 -425 -311 -16 -19 -43 -48 -58 -65 -50 -56 -155
-220 -196 -306 -22 -47 -53 -124 -68 -172 l-28 -88 -1666 0 -1666 0 -13 93
c-7 50 -14 101 -16 112 -2 11 -7 34 -9 50 -77 441 -264 911 -516 1294 -27 41
-49 77 -49 82 0 4 -3 9 -7 11 -5 2 -35 39 -67 83 -180 242 -468 535 -681 691
-22 16 -42 31 -45 35 -3 3 -41 30 -85 60 -399 273 -810 452 -1265 553 -63 14
-135 28 -160 32 -25 3 -54 7 -65 9 -11 2 -42 6 -70 10 -27 3 -61 8 -75 10
-148 23 -614 23 -750 1 -14 -3 -50 -7 -80 -10 -104 -11 -359 -60 -470 -92
-194 -55 -289 -88 -515 -181 -72 -30 -304 -152 -398 -210 -263 -162 -454 -315
-682 -547 -358 -362 -623 -785 -802 -1276 -30 -83 -106 -337 -117 -394 -14
-67 -27 -135 -32 -161 -2 -16 -7 -37 -9 -45 -2 -8 -7 -40 -10 -70 -3 -30 -8
-62 -10 -70 -2 -8 -7 -46 -10 -85 -4 -38 -9 -86 -11 -105 -5 -48 -5 -455 0
-506 15 -148 37 -323 51 -399 76 -403 233 -819 434 -1150 97 -160 222 -339
305 -436 17 -19 50 -58 72 -85 58 -68 224 -235 320 -319 345 -307 757 -545
1204 -698 147 -51 369 -108 505 -132 17 -2 39 -7 50 -9 136 -26 341 -41 580
-41 281 0 456 16 665 60 14 3 41 8 60 11 254 42 726 219 990 371 427 246 773
543 1059 911 74 96 221 305 221 316 0 3 16 30 35 61 41 63 170 319 210 415 74
175 178 508 200 642 3 18 8 40 10 48 2 8 7 31 10 50 3 19 10 60 15 90 5 30 12
77 15 104 3 27 8 52 10 55 2 3 751 6 1665 6 l1662 0 37 -105 c79 -223 195
-413 322 -531 28 -25 28 -26 10 -55 -9 -16 -33 -58 -51 -94 -19 -36 -39 -72
-45 -80 -7 -8 -26 -40 -42 -70 -35 -65 -351 -626 -498 -885 -56 -99 -113 -200
-127 -225 -14 -25 -55 -99 -93 -165 -37 -66 -100 -178 -140 -250 -40 -71 -82
-146 -94 -165 -11 -19 -29 -51 -39 -70 -10 -19 -37 -67 -59 -105 -23 -39 -55
-95 -71 -125 -16 -30 -76 -136 -132 -235 -56 -99 -116 -205 -133 -235 -16 -30
-100 -179 -185 -330 -85 -151 -164 -291 -175 -310 -10 -19 -36 -64 -57 -100
-20 -36 -48 -85 -62 -110 -49 -88 -172 -307 -253 -450 -45 -80 -93 -165 -107
-190 -14 -25 -65 -115 -113 -200 -48 -85 -121 -216 -163 -290 -41 -74 -76
-136 -77 -137 -1 -2 -37 4 -81 12 -374 72 -737 3 -1058 -202 -39 -25 -73 -49
-76 -52 -3 -4 -21 -18 -40 -31 -43 -31 -183 -170 -231 -230 -142 -178 -247
-408 -295 -650 -19 -93 -25 -351 -11 -454 25 -181 101 -398 196 -558 50 -86
147 -216 187 -254 l22 -21 -140 -249 c-77 -137 -153 -274 -170 -304 -17 -30
-38 -68 -48 -85 -10 -16 -29 -50 -42 -75 -14 -25 -60 -105 -102 -179 -42 -73
-76 -135 -76 -137 0 -1 -23 -42 -51 -91 -50 -85 -86 -150 -137 -243 -14 -25
-28 -49 -32 -55 -4 -5 -21 -35 -37 -65 -45 -82 -81 -148 -123 -220 -104 -180
-170 -299 -170 -306 0 -4 -6 -15 -14 -23 -7 -9 -28 -43 -46 -76 -19 -33 -92
-163 -163 -290 -71 -126 -141 -250 -155 -275 -14 -25 -65 -117 -115 -205 -49
-88 -91 -162 -93 -164 -2 -2 -23 4 -46 13 -156 64 -465 162 -571 181 -12 3
-42 9 -67 15 -122 27 -321 55 -470 65 -79 6 -396 6 -465 1 -103 -8 -192 -17
-212 -20 -11 -3 -44 -7 -74 -11 -330 -41 -763 -180 -1099 -353 -179 -92 -439
-258 -559 -357 -342 -282 -555 -514 -763 -835 -172 -265 -324 -583 -414 -870
-4 -14 -9 -29 -11 -35 -7 -23 -83 -318 -88 -343 -14 -71 -45 -285 -50 -347 -3
-38 -8 -92 -10 -120 -6 -63 -6 -400 -1 -440 2 -16 7 -66 11 -110 3 -44 9 -96
11 -115 10 -64 34 -215 38 -235 28 -127 37 -168 50 -215 148 -545 401 -1017
771 -1440 53 -61 248 -253 314 -310 356 -307 757 -535 1205 -684 127 -43 385
-112 444 -120 15 -2 43 -6 62 -10 61 -11 94 -16 145 -22 28 -3 61 -8 75 -10
104 -18 468 -24 650 -11 106 8 119 9 245 28 39 6 84 13 100 15 206 31 586 145
790 239 31 14 58 25 60 25 7 0 173 83 230 115 186 103 420 262 546 369 163
140 286 259 380 366 90 104 100 115 142 170 23 30 45 57 48 60 3 3 21 28 39
55 19 28 37 51 42 53 4 2 8 8 8 14 0 5 11 24 24 41 82 109 223 374 313 587
156 369 243 729 270 1120 15 210 4 555 -22 715 -2 17 -7 48 -10 70 -10 69 -36
196 -62 305 -25 106 -120 403 -147 462 -8 18 -27 62 -41 98 -98 238 -291 561
-474 790 -172 216 -435 472 -643 624 l-67 49 23 41 c13 23 42 73 63 111 22 39
52 90 65 115 14 25 81 144 150 265 69 121 136 240 150 265 14 25 35 63 48 85
13 22 51 90 85 150 34 61 72 128 85 150 13 22 34 60 48 85 13 25 28 50 32 55
4 6 24 42 45 80 21 39 84 151 140 250 56 99 157 276 224 394 66 117 121 217
121 222 0 5 5 9 10 9 6 0 10 5 10 10 0 6 35 73 78 148 43 75 93 162 110 192
149 266 230 405 238 403 5 -1 43 -8 84 -17 199 -40 385 -40 595 3 l85 17 43
-75 c66 -118 81 -143 103 -181 12 -19 108 -186 214 -370 106 -184 200 -346
208 -360 9 -14 17 -27 17 -30 0 -3 27 -50 59 -105 33 -55 89 -152 126 -215
112 -194 164 -284 177 -305 7 -11 16 -27 20 -35 4 -8 49 -87 100 -174 51 -87
93 -160 93 -162 0 -2 25 -44 55 -95 30 -50 55 -93 55 -95 0 -2 14 -27 31 -56
18 -29 41 -69 52 -88 10 -19 61 -107 112 -195 194 -334 389 -672 413 -714 41
-74 82 -145 92 -161 10 -17 64 -109 92 -157 10 -18 26 -48 37 -65 10 -18 69
-121 131 -228 62 -107 147 -253 188 -325 41 -71 86 -150 100 -175 14 -25 35
-61 47 -80 12 -19 33 -56 47 -81 14 -25 54 -93 87 -151 l62 -105 -84 -84 c-96
-97 -122 -129 -183 -221 -131 -200 -203 -396 -234 -642 -9 -72 -6 -305 4 -353
4 -15 8 -41 10 -58 14 -102 63 -250 132 -392 156 -319 419 -562 761 -700 90
-36 236 -77 314 -88 24 -3 57 -8 72 -11 73 -15 310 -5 422 17 27 6 63 13 78
15 15 3 52 14 81 24 l53 18 34 -60 c19 -33 39 -67 44 -76 6 -10 41 -71 78
-137 37 -66 72 -127 77 -135 21 -34 170 -292 170 -295 0 -1 38 -68 85 -149 47
-80 85 -150 85 -156 0 -5 4 -10 8 -10 4 0 15 -15 23 -33 8 -17 66 -120 128
-227 105 -181 147 -254 175 -305 6 -11 13 -22 16 -25 3 -3 11 -16 18 -30 6
-14 26 -50 44 -81 28 -47 258 -449 349 -608 15 -25 84 -144 153 -265 122 -212
134 -236 119 -236 -5 0 -39 -25 -78 -56 -230 -182 -458 -414 -642 -654 -217
-284 -409 -653 -526 -1015 -36 -109 -101 -357 -111 -425 -3 -19 -8 -46 -10
-60 -6 -34 -24 -157 -30 -200 -26 -194 -26 -674 -1 -800 3 -14 7 -47 10 -75 2
-27 14 -97 24 -155 27 -145 30 -160 43 -205 6 -22 11 -44 12 -50 8 -33 32
-114 63 -210 96 -297 234 -582 412 -849 36 -55 71 -106 76 -115 6 -9 12 -18
16 -21 3 -3 18 -23 35 -45 102 -138 338 -391 480 -515 40 -36 223 -180 259
-206 210 -147 489 -305 665 -374 30 -12 66 -27 80 -33 14 -6 27 -11 30 -12 3
-1 12 -5 20 -8 28 -13 317 -106 341 -111 13 -2 62 -13 109 -25 47 -11 97 -23
113 -25 15 -3 54 -10 87 -16 94 -16 105 -18 161 -25 30 -3 70 -8 89 -10 55 -6
277 -17 365 -18 78 0 310 11 343 17 10 2 44 7 77 10 83 10 126 16 155 22 14 2
36 6 50 9 14 3 36 7 50 10 14 3 36 8 50 11 14 3 36 7 50 10 136 27 471 138
610 201 123 57 259 124 320 159 72 41 279 172 325 207 317 236 606 527 809
812 250 353 434 757 541 1185 18 74 37 153 40 175 4 22 9 51 11 65 2 14 6 34
8 45 2 11 7 45 11 75 4 30 9 66 11 80 25 161 25 644 -1 825 -2 17 -6 48 -9 70
-33 256 -141 649 -237 862 -10 24 -19 45 -19 48 0 11 -100 210 -158 315 -61
109 -205 332 -254 393 -13 16 -38 47 -56 70 -83 104 -114 138 -212 241 -91 94
-201 197 -306 286 -291 247 -735 492 -1121 619 -169 55 -410 114 -558 136 -22
3 -53 8 -70 10 -198 33 -709 39 -861 11 -10 -2 -50 -7 -89 -11 -38 -4 -73 -8
-76 -11 -3 -2 -24 -6 -47 -9 -22 -2 -83 -14 -134 -26 -51 -11 -100 -22 -108
-24 -57 -12 -161 -42 -278 -81 -136 -46 -153 -52 -246 -94 -39 -17 -51 -19
-58 -8 -4 7 -29 49 -55 93 -25 44 -70 121 -99 170 -142 244 -379 654 -396 685
-11 19 -29 51 -40 70 -46 80 -317 548 -336 580 -10 19 -70 122 -131 228 -61
106 -120 207 -130 225 -10 17 -38 66 -63 107 -24 41 -47 82 -51 90 -4 8 -17
31 -28 50 -12 19 -73 125 -136 235 -64 110 -123 211 -131 225 -47 74 -50 85
-28 112 42 51 52 64 83 113 31 50 51 85 103 180 27 50 71 171 84 231 l7 31
2805 0 c3031 0 2834 3 2834 -51 0 -12 3 -26 7 -30 4 -3 8 -13 9 -20 3 -21 80
-199 110 -252 139 -252 382 -482 638 -603 115 -54 264 -104 346 -117 19 -3 41
-7 48 -9 50 -17 300 -24 407 -11 275 33 543 148 760 326 213 175 375 414 456
673 l31 97 36 1 c166 3 3184 1 3187 -3 2 -2 7 -26 10 -53 6 -51 21 -146 30
-200 5 -26 27 -129 41 -187 2 -10 6 -27 8 -37 60 -270 222 -662 391 -945 88
-149 252 -378 340 -476 146 -162 216 -233 340 -345 341 -308 789 -568 1230
-713 111 -36 370 -105 440 -116 17 -2 44 -7 60 -10 206 -36 356 -49 590 -50
197 0 298 6 484 29 236 30 641 132 796 200 17 8 66 28 110 46 526 215 1041
610 1408 1082 81 103 224 314 269 397 89 162 112 208 162 316 86 192 194 510
221 654 3 14 7 36 10 50 3 14 7 35 10 48 2 13 6 31 9 40 3 9 7 39 11 66 3 27
8 52 9 55 2 3 7 40 11 81 4 41 9 83 11 93 20 106 20 600 -1 705 -2 10 -6 49
-9 87 -33 350 -159 782 -328 1120 -356 710 -915 1257 -1641 1604 -70 34 -133
61 -140 61 -7 0 -17 4 -22 9 -26 25 -470 167 -576 185 -19 3 -45 8 -59 11 -68
14 -190 35 -235 40 -27 4 -61 8 -75 11 -104 18 -510 24 -670 10 -182 -15 -361
-44 -520 -82 -58 -14 -114 -27 -126 -30 -58 -11 -295 -92 -414 -141 -121 -50
-283 -129 -425 -208 -93 -51 -329 -213 -440 -302 -152 -121 -412 -383 -531
-533 -297 -375 -508 -779 -637 -1220 -26 -87 -37 -130 -44 -164 -2 -11 -10
-45 -17 -75 -8 -31 -17 -72 -20 -91 -3 -19 -8 -46 -11 -60 -5 -25 -9 -51 -20
-140 -4 -25 -8 -55 -11 -68 l-4 -22 -1622 2 -1621 3 -24 70 c-24 73 -50 139
-85 215 -23 49 -116 196 -139 220 -8 8 -22 25 -31 38 -8 12 -36 45 -62 72
l-47 49 74 133 c41 73 89 160 107 193 18 33 44 77 57 97 12 21 23 39 23 42 0
2 25 48 56 102 31 55 68 122 83 149 15 28 40 71 54 98 15 26 38 67 52 92 51
92 79 142 120 215 23 41 108 192 187 335 80 143 156 278 168 300 70 123 92
163 106 190 8 17 24 46 36 65 11 19 33 58 48 85 15 28 55 99 89 159 33 60 61
111 61 113 0 2 10 20 23 41 13 20 40 66 59 102 20 36 66 119 103 185 37 66 90
161 117 210 67 119 91 162 118 210 48 85 164 292 185 330 12 22 44 81 72 130
28 50 63 113 78 140 15 28 68 121 116 208 49 87 89 160 89 162 0 3 16 29 35
59 19 30 35 57 35 60 0 3 15 31 34 63 18 32 50 89 70 126 20 37 46 84 58 105
12 20 41 73 66 117 117 213 134 237 156 231 109 -31 184 -40 331 -40 191 -1
272 8 400 45 191 55 326 121 485 238 80 59 217 191 265 256 17 22 33 42 36 45
15 12 99 152 132 220 69 145 88 198 118 340 95 452 -18 906 -312 1250 -35 41
-71 81 -81 88 -10 7 -18 19 -18 27 0 7 47 96 103 197 57 100 119 210 137 243
18 33 83 148 143 255 61 107 118 209 127 225 9 17 71 127 137 245 162 290 350
625 381 680 35 60 53 93 150 267 45 81 87 155 92 163 5 8 41 71 79 140 38 69
108 194 155 279 48 84 103 183 123 220 20 36 39 70 43 74 3 4 58 -12 121 -37
163 -63 397 -133 507 -152 15 -3 43 -9 62 -14 19 -4 58 -12 85 -16 28 -4 57
-9 65 -10 8 -2 35 -6 60 -9 25 -3 56 -7 70 -10 147 -25 675 -26 805 -1 11 2
47 7 79 11 500 57 1084 284 1530 593 259 178 537 436 716 662 28 36 57 73 65
82 140 170 345 524 447 773 44 107 59 145 63 155 1 3 4 12 7 20 55 146 131
426 153 560 3 19 7 46 10 60 14 77 22 138 30 230 3 36 8 81 10 100 6 43 7 403
1 485 -5 57 -9 102 -21 220 -3 28 -7 57 -10 65 -2 8 -7 33 -10 55 -21 151
-112 506 -158 615 -6 14 -11 27 -11 30 -12 58 -166 386 -249 530 -189 329
-457 658 -721 885 -32 28 -63 55 -69 60 -178 154 -472 343 -722 464 -157 76
-497 205 -595 226 -8 2 -35 8 -60 15 -84 21 -255 58 -295 64 -22 3 -49 7 -60
10 -11 2 -49 7 -85 11 -36 4 -73 9 -82 10 -108 21 -615 21 -725 1 -10 -2 -44
-7 -76 -10 -49 -6 -119 -17 -262 -42 -16 -3 -57 -12 -90 -21 -33 -8 -67 -16
-75 -18 -99 -20 -354 -105 -500 -167 -85 -36 -258 -120 -350 -170 -412 -222
-833 -596 -1125 -998 -155 -212 -304 -481 -410 -738 -56 -136 -130 -365 -160
-492 -48 -203 -81 -402 -92 -557 -14 -185 -6 -674 11 -702 2 -3 7 -35 11 -71
4 -36 8 -67 10 -70 2 -3 6 -27 9 -54 4 -27 9 -52 11 -55 1 -3 6 -24 9 -46 17
-108 87 -357 138 -490 152 -401 344 -734 601 -1045 148 -178 412 -427 604
-569 l71 -53 -20 -37 c-11 -20 -100 -178 -198 -351 -97 -173 -194 -346 -215
-385 -21 -38 -49 -87 -62 -107 -13 -21 -23 -39 -23 -42 0 -2 -29 -54 -65 -116
-36 -62 -65 -114 -65 -115 0 -2 -18 -35 -40 -74 -22 -38 -49 -87 -61 -108 -12
-21 -33 -58 -47 -83 -14 -25 -44 -79 -67 -120 -39 -69 -294 -524 -353 -630
-14 -25 -62 -110 -107 -190 -45 -80 -97 -172 -115 -205 -18 -33 -53 -96 -78
-140 -25 -44 -55 -98 -67 -120 -82 -148 -100 -175 -114 -170 -7 3 -55 13 -105
22 -131 23 -362 22 -476 -2 -35 -7 -82 -16 -103 -18 -17 -2 -36 22 -80 104 -8
14 -76 135 -153 268 -140 243 -157 274 -209 366 -15 28 -132 231 -259 453
-127 222 -242 422 -255 445 -71 125 -262 455 -361 622 -27 45 -59 101 -73 125
-14 25 -62 108 -107 185 -45 77 -94 160 -108 185 -14 25 -42 74 -64 109 -21
34 -38 66 -38 69 0 3 -6 13 -14 21 -7 9 -27 41 -43 71 -17 30 -124 215 -238
410 -115 195 -338 577 -496 847 l-288 493 68 67 c166 168 289 359 358 558 62
180 78 283 78 490 0 151 -7 227 -27 300 -5 22 -12 51 -15 64 -8 47 -64 197
-103 277 -134 271 -377 518 -645 651 -308 155 -672 198 -991 118 -54 -14 -106
-27 -114 -30 -8 -2 -24 -7 -35 -10 -17 -5 -28 6 -63 67 -24 40 -47 80 -52 88
-21 35 -245 419 -268 460 -14 25 -44 77 -67 115 -23 39 -80 135 -126 215 -46
80 -89 154 -96 165 -7 11 -16 27 -20 35 -4 8 -27 49 -51 90 -25 41 -123 210
-220 375 -162 279 -228 391 -260 440 -6 11 -16 29 -21 40 -6 11 -106 182 -223
380 l-214 360 71 55 c348 271 642 605 869 986 36 62 66 115 66 118 0 4 10 23
23 44 42 68 149 315 203 468 89 257 138 468 179 774 25 187 25 603 0 798 -15
117 -35 240 -46 292 -6 25 -13 56 -15 70 -10 53 -56 220 -90 325 -212 650
-635 1253 -1185 1687 -79 63 -302 218 -313 218 -3 0 -25 13 -49 30 -70 47
-321 174 -452 228 -292 122 -651 217 -930 247 -33 4 -71 8 -83 10 -51 8 -429
24 -435 19z m2948 -11057 c26 -80 104 -247 147 -317 202 -327 579 -585 958
-654 112 -21 175 -27 290 -26 95 1 126 3 211 15 44 7 46 6 63 -27 9 -18 25
-46 35 -63 21 -33 178 -303 219 -375 14 -25 36 -62 49 -82 12 -21 23 -40 23
-44 0 -3 14 -26 30 -51 17 -24 30 -46 30 -49 0 -3 16 -30 35 -60 19 -30 35
-56 35 -58 0 -2 109 -190 241 -417 133 -228 249 -427 259 -444 19 -33 461
-794 518 -890 19 -33 48 -85 65 -115 16 -30 35 -62 42 -70 7 -8 15 -22 19 -30
3 -8 18 -36 34 -62 223 -383 402 -691 423 -727 14 -25 59 -102 99 -171 40 -69
81 -140 92 -158 44 -78 102 -179 205 -357 61 -104 124 -213 139 -240 16 -28
64 -112 107 -188 67 -115 77 -139 65 -150 -134 -139 -235 -294 -326 -503 -21
-49 -67 -222 -77 -294 -3 -19 -8 -45 -10 -56 -8 -35 -8 -263 0 -329 8 -71 53
-281 65 -304 5 -9 20 -47 35 -86 43 -112 163 -312 228 -380 6 -7 31 -33 55
-59 l43 -46 -47 -88 c-26 -48 -58 -104 -71 -124 -12 -21 -23 -39 -23 -42 0 -4
-92 -169 -298 -536 -35 -63 -80 -144 -99 -180 -20 -36 -39 -69 -43 -75 -5 -5
-22 -37 -39 -70 -18 -33 -40 -73 -50 -90 -10 -16 -55 -97 -101 -180 -45 -82
-111 -199 -145 -260 -34 -60 -76 -135 -92 -165 -17 -30 -45 -80 -62 -110 -18
-30 -39 -68 -47 -85 -8 -16 -25 -48 -37 -70 -13 -22 -38 -67 -56 -100 -19 -33
-51 -89 -71 -125 -43 -75 -418 -748 -463 -830 -35 -63 -144 -258 -157 -280 -8
-13 -69 -123 -156 -280 -16 -30 -35 -64 -42 -75 -50 -88 -122 -216 -122 -220
0 -2 -23 -43 -51 -92 -28 -48 -63 -110 -78 -138 -24 -43 -81 -146 -148 -265
-11 -19 -35 -62 -53 -95 -76 -138 -152 -270 -158 -277 -4 -3 -36 0 -72 8 -196
42 -427 36 -636 -17 -102 -25 -109 -27 -109 -29 0 -1 -7 -3 -15 -5 -29 -7
-141 -55 -208 -91 -210 -111 -395 -278 -530 -481 -23 -34 -42 -64 -42 -67 0
-3 -13 -27 -28 -53 -32 -55 -71 -149 -102 -243 l-21 -65 -2807 1 c-1544 1
-2810 2 -2814 3 -5 0 -8 8 -8 16 0 8 -13 54 -30 101 -135 390 -460 721 -855
869 -85 32 -241 72 -320 81 -121 14 -317 9 -435 -11 l-35 -6 -145 252 c-80
139 -159 277 -176 308 -17 31 -100 175 -184 321 -83 146 -162 283 -175 305
-12 22 -53 94 -92 160 -38 66 -72 127 -76 135 -4 8 -17 31 -28 50 -31 51 -481
837 -516 900 -8 14 -22 39 -32 55 -33 55 -733 1279 -764 1335 -16 30 -38 67
-49 82 -10 14 -18 28 -18 31 0 2 -29 54 -64 115 -36 61 -76 131 -89 154 -39
69 -68 121 -88 153 -10 17 -26 46 -37 65 -11 19 -63 112 -117 205 -54 94 -104
181 -111 194 -12 23 -9 29 39 85 97 112 139 175 204 301 68 134 124 297 139
405 2 19 7 46 10 60 12 58 12 310 -1 400 -46 315 -175 582 -400 824 -33 35
-35 40 -22 60 8 11 35 59 62 106 26 47 76 135 110 195 70 123 394 695 433 765
14 25 52 92 85 150 75 133 80 140 195 345 52 94 104 182 114 198 11 15 16 27
12 27 -4 0 0 8 8 18 8 9 32 49 53 87 21 39 41 75 45 80 4 6 21 35 37 65 17 30
46 82 65 115 37 64 131 230 246 435 14 25 111 196 215 380 105 184 201 355
215 380 14 25 33 59 42 75 35 61 228 402 252 445 14 25 52 92 85 150 33 58 71
125 85 150 14 25 34 61 45 80 11 19 82 145 158 280 76 135 143 251 150 258 10
11 22 11 71 -2 134 -35 389 -40 550 -12 451 78 840 370 1049 787 45 89 108
259 96 259 -3 0 0 4 8 9 8 5 1203 9 2812 9 l2798 0 26 -81z"/>
<path d="M20538 22876 c-1 -2 -62 -6 -134 -9 -72 -4 -137 -8 -145 -11 -8 -3
-34 -7 -59 -10 -160 -20 -364 -73 -545 -143 -208 -81 -482 -241 -642 -376 -98
-82 -137 -119 -212 -196 -294 -303 -498 -663 -606 -1066 -13 -49 -27 -106 -30
-125 -3 -19 -8 -42 -10 -50 -2 -8 -6 -33 -10 -55 -3 -22 -7 -47 -10 -55 -10
-35 -18 -187 -19 -340 -1 -212 9 -316 50 -520 59 -294 210 -637 393 -895 182
-255 462 -516 724 -673 204 -123 490 -244 655 -278 12 -2 59 -13 105 -24 45
-10 106 -22 136 -25 30 -4 63 -8 74 -10 108 -21 488 -21 597 0 12 2 48 7 79
11 31 3 59 8 62 10 3 2 21 6 40 9 61 10 222 54 309 83 662 226 1201 736 1467
1387 39 96 88 240 97 287 2 13 7 30 10 38 3 8 7 26 10 40 3 14 11 59 20 100
44 217 55 607 22 775 -2 11 -7 40 -10 65 -4 25 -8 52 -10 60 -1 8 -6 33 -11
55 -26 134 -87 327 -143 457 -196 449 -505 817 -907 1080 -364 239 -777 374
-1200 394 -66 3 -125 7 -132 9 -6 2 -13 2 -15 1z"/>
<path d="M27698 34296 c-1 -2 -52 -6 -113 -9 -249 -12 -499 -97 -723 -247 -90
-60 -254 -212 -324 -300 -37 -47 -148 -216 -148 -225 0 -3 -10 -26 -24 -53
-47 -93 -105 -281 -121 -389 -3 -23 -8 -57 -11 -75 -2 -18 -5 -93 -5 -166 1
-239 51 -448 158 -657 44 -84 102 -179 114 -183 5 -2 9 -10 9 -17 0 -7 3 -15
8 -17 4 -1 31 -32 61 -68 65 -78 67 -79 158 -157 135 -115 268 -194 434 -256
175 -66 322 -91 529 -90 567 2 1086 346 1313 869 33 75 58 143 56 154 0 3 5
19 11 35 12 32 15 44 29 115 25 123 33 341 17 450 -48 339 -173 602 -400 839
-86 89 -293 251 -322 251 -3 0 -18 8 -32 18 -54 38 -270 121 -352 136 -14 2
-36 7 -50 10 -54 13 -88 17 -165 22 -44 3 -85 7 -92 9 -6 2 -13 2 -15 1z"/>
<path d="M13238 34284 c-2 -1 -25 -5 -53 -8 -115 -13 -136 -18 -216 -42 -46
-13 -91 -26 -99 -28 -63 -16 -238 -106 -340 -174 -120 -80 -300 -263 -383
-388 -136 -204 -209 -406 -242 -664 -7 -58 -8 -249 -1 -281 3 -13 7 -46 10
-74 6 -52 7 -60 25 -138 14 -61 62 -198 91 -262 30 -64 102 -189 112 -193 5
-2 8 -8 8 -13 0 -6 4 -15 10 -22 5 -7 31 -39 57 -72 90 -116 246 -254 373
-333 151 -93 389 -179 545 -197 28 -3 61 -8 74 -11 30 -6 278 -7 288 -1 5 3
35 7 68 11 60 6 231 50 315 81 111 41 309 156 395 231 237 203 387 429 471
709 24 80 27 89 38 155 3 19 8 49 12 65 20 113 7 392 -26 525 -6 25 -13 55
-15 67 -11 47 -59 171 -97 248 -89 178 -235 361 -388 487 -202 165 -453 274
-725 313 -47 7 -302 15 -307 9z"/>
<path d="M6029 21886 c-2 -2 -29 -6 -59 -10 -92 -10 -122 -16 -215 -42 -447
-127 -804 -456 -968 -895 -20 -53 -38 -106 -40 -120 -3 -13 -10 -42 -15 -64
-21 -81 -36 -219 -35 -335 6 -589 365 -1116 909 -1333 103 -41 211 -73 279
-83 17 -2 55 -8 85 -13 68 -11 286 -12 360 -1 107 16 135 22 220 46 336 96
617 302 820 603 64 96 163 314 185 411 37 155 49 250 49 385 0 86 -11 233 -19
245 -2 3 -6 24 -10 47 -7 51 -45 178 -74 250 -128 323 -383 600 -698 757 -99
50 -231 98 -313 115 -30 6 -66 14 -80 16 -14 3 -38 8 -55 11 -38 7 -320 16
-326 10z"/>
<path d="M34679 21886 c-2 -2 -31 -7 -64 -10 -33 -4 -67 -9 -75 -11 -8 -2 -28
-7 -45 -9 -16 -3 -66 -16 -110 -30 -450 -136 -808 -483 -955 -926 -57 -171
-78 -307 -74 -487 1 -81 4 -157 7 -168 2 -11 10 -51 17 -90 30 -172 115 -375
226 -542 78 -118 261 -301 383 -381 158 -106 364 -194 511 -218 14 -3 31 -7
39 -10 54 -19 362 -26 471 -11 539 76 996 454 1170 967 22 63 42 129 45 145 7
34 21 122 30 180 7 45 7 205 0 280 -27 324 -173 643 -397 873 -95 98 -206 192
-227 192 -5 0 -11 4 -13 9 -4 13 -59 44 -173 100 -140 69 -244 102 -425 136
-41 7 -334 17 -341 11z"/>
<path d="M13135 9475 c-547 -88 -985 -458 -1161 -979 -19 -54 -39 -126 -45
-160 -6 -34 -13 -70 -15 -81 -7 -40 -14 -141 -15 -220 -4 -554 325 -1074 831
-1312 142 -67 281 -109 440 -131 63 -9 292 -8 370 1 311 37 653 209 860 434
89 96 104 116 157 194 166 246 246 503 247 799 1 147 -7 230 -30 330 -9 36
-17 70 -18 75 -11 52 -67 193 -107 272 -74 143 -149 245 -273 368 -207 207
-445 336 -731 397 -115 25 -394 32 -510 13z"/>
<path d="M27578 9485 c-1 -1 -34 -6 -73 -9 -309 -30 -642 -193 -874 -428 -192
-195 -335 -461 -385 -713 -25 -130 -28 -155 -31 -270 -2 -99 16 -312 29 -333
3 -5 8 -24 11 -43 22 -124 116 -333 221 -492 65 -97 221 -265 299 -323 22 -16
42 -31 45 -34 3 -3 37 -26 75 -50 410 -257 910 -297 1354 -108 53 23 112 52
131 65 19 13 38 23 42 23 10 0 176 117 212 149 198 178 335 377 415 604 35
100 57 182 66 247 3 25 9 54 12 64 9 32 11 276 2 346 -33 266 -127 502 -287
719 -105 143 -287 306 -437 391 -170 97 -353 159 -540 185 -54 7 -281 16 -287
10z"/>
</g>
</svg>
</file>

<file path="public/site.webmanifest">
{
    "name": "",
    "short_name": "",
    "icons": [
        {
            "src": "/android-chrome-192x192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "/android-chrome-512x512.png",
            "sizes": "512x512",
            "type": "image/png"
        }
    ],
    "theme_color": "#ffffff",
    "background_color": "#ffffff",
    "display": "standalone"
}
</file>

<file path="src/app/mentions-legales/page.tsx">
import { Metadata } from 'next'

import Hero from '@/components/HeroTitle'
import Section from '@/components/Section'

export const metadata: Metadata = {
    title: `Mentions légales - SILARHI`,
}

export default function Page() {
    return (
        <>
            <Hero title="Mentions Légales" />
            <Section>
                <h2>1. Présentation du site.</h2>
                <p>
                    En vertu de l{"'"}article 6 de la loi n° 2004-575 du 21 juin 2004 pour la confiance dans l{"'"}
                    économie numérique, il est précisé aux utilisateurs du site&nbsp;
                    <a href="https://silarhi.fr/">silarhi.fr</a>&nbsp;l{"'"}identité des différents intervenants dans le
                    cadre de sa réalisation et de son suivi :<br />
                </p>
                <p>
                    <strong>Propriétaire</strong>&nbsp;: SILARHI – SASU – SIRET N° 84154166700017 – 116 Route d{"'"}
                    Espagne, BAL 411, 31100 Toulouse
                    <br />
                    <strong>Créateur</strong>&nbsp;:&nbsp;<a href="https://sainthillier.fr/">Guillaume Sainthillier</a>
                    <br />
                    <strong>Responsable publication</strong>&nbsp;: Guillaume Sainthillier – Guillaume Sainthillier
                    <br />
                    <br />
                    Le responsable publication est une personne physique ou une personne morale.
                    <br />
                    <strong>Webmaster</strong>&nbsp;: Guillaume Sainthillier – hello@silarhi.fr
                    <br />
                    <strong>Hébergeur</strong>&nbsp;: OVH – So you Start OVH SAS au capital de 10 069 020 € RCS Roubaix
                    – Tourcoing 424 761 419 00045 Code APE 2620Z N° TVA : FR 22 424 761 419 Siège social : 2 rue
                    Kellermann – 59100 Roubaix – France.
                </p>
                <p></p>
                <h2>2. Conditions générales d{"'"}utilisation du site et des services proposés.</h2>
                <p>
                    L{"'"}utilisation du site&nbsp;<a href="https://silarhi.fr/">silarhi.fr</a>&nbsp;implique l{"'"}
                    acceptation pleine et entière des conditions générales d{"'"}utilisation ci-après décrites. Ces
                    conditions d{"'"}utilisation sont susceptibles d{"'"}être modifiées ou complétées à tout moment, les
                    utilisateurs du site&nbsp;<a href="https://silarhi.fr/">silarhi.fr</a>&nbsp;sont donc invités à les
                    consulter de manière régulière.
                    <br />
                </p>
                <p>
                    Ce site est normalement accessible à tout moment aux utilisateurs. Une interruption pour raison de
                    maintenance technique peut être toutefois décidée par SILARHI, qui s{"'"}efforcera alors de
                    communiquer préalablement aux utilisateurs les dates et heures de l{"'"}intervention.
                    <br />
                </p>
                <p>
                    Le site&nbsp;<a href="https://silarhi.fr/">silarhi.fr</a>&nbsp;est mis à jour régulièrement par
                    Guillaume Sainthillier. De la même façon, les mentions légales peuvent être modifiées à tout moment
                    : elles s{"'"}imposent néanmoins à l{"'"}utilisateur qui est invité à s{"'"}y référer le plus
                    souvent possible afin d{"'"}en prendre connaissance.
                    <br />
                </p>
                <h2>3. Description des services fournis.</h2>
                <p>
                    Le site&nbsp;<a href="https://silarhi.fr/">silarhi.fr</a>&nbsp;a pour objet de fournir une
                    information concernant l{"'"}ensemble des activités de la société.
                    <br />
                </p>
                <p>
                    SILARHI s{"'"}efforce de fournir sur le site&nbsp;<a href="https://silarhi.fr/">silarhi.fr</a>
                    &nbsp;des informations aussi précises que possible. Toutefois, il ne pourra être tenue responsable
                    des omissions, des inexactitudes et des carences dans la mise à jour, qu{"'"}elles soient de son
                    fait ou du fait des tiers partenaires qui lui fournissent ces informations.
                    <br />
                </p>
                <p>
                    Tous les informations indiquées sur le site&nbsp;<a href="https://silarhi.fr/">silarhi.fr</a>
                    &nbsp;sont données à titre indicatif, et sont susceptibles d{"'"}évoluer. Par ailleurs, les
                    renseignements figurant sur le site&nbsp;<a href="https://silarhi.fr/">silarhi.fr</a>&nbsp;ne sont
                    pas exhaustifs. Ils sont donnés sous réserve de modifications ayant été apportées depuis leur mise
                    en ligne.
                    <br />
                </p>
                <h2>4. Limitations contractuelles sur les données techniques.</h2>
                <p>
                    Le site utilise la technologie JavaScript.
                    <br />
                </p>
                <p>
                    Le site Internet ne pourra être tenu responsable de dommages matériels liés à l{"'"}utilisation du
                    site. De plus, l{"'"}utilisateur du site s{"'"}engage à accéder au site en utilisant un matériel
                    récent, ne contenant pas de virus et avec un navigateur de dernière génération mis-à-jour
                    <br />
                </p>
                <h2>5. Propriété intellectuelle et contrefaçons.</h2>
                <p>
                    SILARHI est propriétaire des droits de propriété intellectuelle ou détient les droits d{"'"}usage
                    sur tous les éléments accessibles sur le site, notamment les textes, images, graphismes, logo,
                    icônes, sons, logiciels.
                    <br />
                </p>
                <p>
                    Toute reproduction, représentation, modification, publication, adaptation de tout ou partie des
                    éléments du site, quel que soit le moyen ou le procédé utilisé, est interdite, sauf autorisation
                    écrite préalable de : SILARHI.
                    <br />
                </p>
                <p>
                    Toute exploitation non autorisée du site ou de l{"'"}un quelconque des éléments qu{"'"}il contient
                    sera considérée comme constitutive d{"'"}une contrefaçon et poursuivie conformément aux dispositions
                    des articles L.335-2 et suivants du Code de Propriété Intellectuelle.
                    <br />
                </p>
                <h2>6. Limitations de responsabilité.</h2>
                <p>
                    SILARHI ne pourra être tenue responsable des dommages directs et indirects causés au matériel de l
                    {"'"}utilisateur, lors de l{"'"}accès au site silarhi.fr, et résultant soit de l{"'"}utilisation d
                    {"'"}un matériel ne répondant pas aux spécifications indiquées au point 4, soit de l{"'"}apparition
                    d{"'"}un bug ou d{"'"}une incompatibilité.
                    <br />
                </p>
                <p>
                    SILARHI ne pourra également être tenue responsable des dommages indirects (tels par exemple qu{"'"}
                    une perte de marché ou perte d{"'"}une chance) consécutifs à l{"'"}utilisation du site&nbsp;
                    <a href="https://silarhi.fr/">silarhi.fr</a>.<br />
                </p>
                <p>
                    Des espaces interactifs (possibilité de poser des questions dans l{"'"}espace contact) sont à la
                    disposition des utilisateurs. SILARHI se réserve le droit de supprimer, sans mise en demeure
                    préalable, tout contenu déposé dans cet espace qui contreviendrait à la législation applicable en
                    France, en particulier aux dispositions relatives à la protection des données. Le cas échéant,
                    SILARHI se réserve également la possibilité de mettre en cause la responsabilité civile et/ou pénale
                    de l{"'"}utilisateur, notamment en cas de message à caractère raciste, injurieux, diffamant, ou
                    pornographique, quel que soit le support utilisé (texte, photographie…).
                    <br />
                </p>
                <h2>7. Gestion des données personnelles.</h2>
                <p>
                    En France, les données personnelles sont notamment protégées par la loi n° 78-87 du 6 janvier 1978,
                    la loi n° 2004-801 du 6 août 2004, l{"'"}article L. 226-13 du Code pénal et la Directive Européenne
                    du 24 octobre 1995.
                    <br />
                </p>
                <p>
                    A l{"'"}occasion de l{"'"}utilisation du site&nbsp;<a href="https://silarhi.fr/">silarhi.fr</a>,
                    peuvent êtres recueillies : l{"'"}URL des liens par l{"'"}intermédiaire desquels l{"'"}utilisateur a
                    accédé au site&nbsp;<a href="https://silarhi.fr/">silarhi.fr</a>, le fournisseur d{"'"}accès de l
                    {"'"}utilisateur, l{"'"}adresse de protocole Internet (IP) de l{"'"}utilisateur.
                    <br />
                </p>
                <p>
                    En tout état de cause SILARHI ne collecte des informations personnelles relatives à l{"'"}
                    utilisateur que pour le besoin de certains services proposés par le site&nbsp;
                    <a href="https://silarhi.fr/">silarhi.fr</a>. L{"'"}utilisateur fournit ces informations en toute
                    connaissance de cause, notamment lorsqu{"'"}il procède par lui-même à leur saisie. Il est alors
                    précisé à l{"'"}utilisateur du site&nbsp;<a href="https://silarhi.fr/">silarhi.fr</a>&nbsp;l{"'"}
                    obligation ou non de fournir ces informations.
                    <br />
                </p>
                <p>
                    Conformément aux dispositions des articles 38 et suivants de la loi 78-17 du 6 janvier 1978 relative
                    à l{"'"}informatique, aux fichiers et aux libertés, tout utilisateur dispose d{"'"}un droit d{"'"}
                    accès, de rectification et d{"'"}opposition aux données personnelles le concernant, en effectuant sa
                    demande écrite et signée, accompagnée d{"'"}une copie du titre d{"'"}identité avec signature du
                    titulaire de la pièce, en précisant l{"'"}adresse à laquelle la réponse doit être envoyée.
                    <br />
                </p>
                <p>
                    Aucune information personnelle de l{"'"}utilisateur du site&nbsp;
                    <a href="https://silarhi.fr/">silarhi.fr</a>&nbsp;n{"'"}est publiée à l{"'"}insu de l{"'"}
                    utilisateur, échangée, transférée, cédée ou vendue sur un support quelconque à des tiers. Seule l
                    {"'"}hypothèse du rachat de SILARHI et de ses droits permettrait la transmission des dites
                    informations à l{"'"}éventuel acquéreur qui serait à son tour tenu de la même obligation de
                    conservation et de modification des données vis à vis de l{"'"}utilisateur du site&nbsp;
                    <a href="https://silarhi.fr/">silarhi.fr</a>.<br />
                </p>
                <p>
                    Le site n{"'"}est pas déclaré à la CNIL car il ne recueille pas d{"'"}informations personnelles. .
                    <br />
                </p>
                <p>
                    Les bases de données sont protégées par les dispositions de la loi du 1er juillet 1998 transposant
                    la directive 96/9 du 11 mars 1996 relative à la protection juridique des bases de données.
                    <br />
                </p>
                <h2>8. Liens hypertextes et cookies.</h2>
                <p>
                    Le site&nbsp;<a href="https://silarhi.fr/">silarhi.fr</a>&nbsp;contient un certain nombre de liens
                    hypertextes vers d{"'"}autres sites, mis en place avec l{"'"}autorisation de SILARHI. Cependant,
                    SILARHI n{"'"}a pas la possibilité de vérifier le contenu des sites ainsi visités, et n{"'"}assumera
                    en conséquence aucune responsabilité de ce fait.
                    <br />
                </p>
                <p>
                    La navigation sur le site&nbsp;<a href="https://silarhi.fr/">silarhi.fr</a>&nbsp;est susceptible de
                    provoquer l{"'"}installation de cookie(s) sur l{"'"}ordinateur de l{"'"}utilisateur. Un cookie est
                    un fichier de petite taille, qui ne permet pas l{"'"}identification de l{"'"}utilisateur, mais qui
                    enregistre des informations relatives à la navigation d{"'"}un ordinateur sur un site. Les données
                    ainsi obtenues visent à faciliter la navigation ultérieure sur le site, et ont également vocation à
                    permettre diverses mesures de fréquentation.
                    <br />
                </p>
                <p>
                    Le refus d{"'"}installation d{"'"}un cookie peut entraîner l{"'"}impossibilité d{"'"}accéder à
                    certains services. L{"'"}utilisateur peut toutefois configurer son ordinateur de la manière
                    suivante, pour refuser l{"'"}installation des cookies :<br />
                </p>
                <p>
                    Sous Internet Explorer : onglet outil (pictogramme en forme de rouage en haut a droite) / options
                    internet. Cliquez sur Confidentialité et choisissez Bloquer tous les cookies. Validez sur Ok.
                    <br />
                </p>
                <p>
                    Sous Firefox : en haut de la fenêtre du navigateur, cliquez sur le bouton Firefox, puis aller dans l
                    {"'"}onglet Options. Cliquer sur l{"'"}onglet Vie privée.&nbsp;
                    <br />
                    Paramétrez les Règles de conservation sur : utiliser les paramètres personnalisés pour l{"'"}
                    historique. Enfin décochez-la pour désactiver les cookies.
                    <br />
                </p>
                <p>
                    Sous Safari : Cliquez en haut à droite du navigateur sur le pictogramme de menu (symbolisé par un
                    rouage). Sélectionnez Paramètres. Cliquez sur Afficher les paramètres avancés. Dans la section
                    «&nbsp;Confidentialité&nbsp;», cliquez sur Paramètres de contenu. Dans la section
                    «&nbsp;Cookies&nbsp;», vous pouvez bloquer les cookies.
                    <br />
                </p>
                <p>
                    Sous Chrome : Cliquez en haut à droite du navigateur sur le pictogramme de menu (symbolisé par trois
                    lignes horizontales). Sélectionnez Paramètres. Cliquez sur Afficher les paramètres avancés. Dans la
                    section «&nbsp;Confidentialité&nbsp;», cliquez sur préférences. Dans l{"'"}onglet
                    «&nbsp;Confidentialité&nbsp;», vous pouvez bloquer les cookies.
                </p>
                <p></p>
                <h2>9. Droit applicable et attribution de juridiction.</h2>
                <p>
                    Tout litige en relation avec l{"'"}utilisation du site&nbsp;
                    <a href="https://silarhi.fr/">silarhi.fr</a>&nbsp;est soumis au droit français. Il est fait
                    attribution exclusive de juridiction aux tribunaux compétents de Paris.
                    <br />
                </p>
                <h2>10. Les principales lois concernées.</h2>
                <p>
                    Loi n° 78-17 du 6 janvier 1978, notamment modifiée par la loi n° 2004-801 du 6 août 2004 relative à
                    l{"'"}informatique, aux fichiers et aux libertés.
                    <br />
                </p>
                <p>
                    Loi n° 2004-575 du 21 juin 2004 pour la confiance dans l{"'"}économie numérique.
                    <br />
                </p>
                <h2>11. Lexique.</h2>
                <p>
                    Utilisateur : Internaute se connectant, utilisant le site susnommé.
                    <br />
                </p>
                <p>
                    Informations personnelles : « les informations qui permettent, sous quelque forme que ce soit,
                    directement ou non, l{"'"}identification des personnes physiques auxquelles elles s{"'"}appliquent »
                    (article 4 de la loi n° 78-17 du 6 janvier 1978).
                </p>
            </Section>
        </>
    )
}
</file>

<file path="src/app/fonts.js">
import { Lato, Montserrat } from 'next/font/google'

export const lato = Lato({
    subsets: ['latin'],
    weight: ['700'],
    display: 'swap',
})

export const montserrat = Montserrat({
    weight: ['300', '700'],
    subsets: ['latin'],
    variable: '--body-font',
})
</file>

<file path="src/app/fonts.ts">
import { Lato, Montserrat } from 'next/font/google'

export const lato = Lato({
    subsets: ['latin'],
    weight: ['700'],
    display: 'swap',
})

export const montserrat = Montserrat({
    weight: ['300', '700'],
    subsets: ['latin'],
    variable: '--body-font',
})
</file>

<file path="src/components/ActiveLink/index.tsx">
import Link, { LinkProps } from 'next/link'
import { usePathname } from 'next/navigation'
import React, { ReactNode, useEffect, useState } from 'react'

import { cn } from '@/utils/lib'

interface ActiveLinkProps extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, keyof LinkProps>, LinkProps {
    children: ReactNode
    className?: string
    activeClassName?: string
    href: string
    as?: string
}

export default function ActiveLink({ children, className, activeClassName, ...props }: ActiveLinkProps) {
    const pathname = usePathname()

    const [linkClassName, setLinkClassName] = useState<string>(className || '')

    useEffect(() => {
        if (pathname) {
            // Dynamic route will be matched via props.as Static route will be matched via props.href
            const linkPathname = new URL(props.as || props.href, location.href).href

            // Using URL().pathname to get rid of query and hash
            const activePathname = new URL(pathname, location.href).href

            const newClassName = cn(className, {
                [activeClassName || '']: linkPathname === activePathname,
            })

            if (newClassName !== linkClassName) {
                setLinkClassName(newClassName)
            }
        }
    }, [pathname, props.as, props.href, className, activeClassName, setLinkClassName, linkClassName])

    return (
        <Link className={linkClassName} {...props}>
            {children}
        </Link>
    )
}
</file>

<file path="src/components/Form/InputIcon.tsx">
import { ReactNode } from 'react'

interface InputIconProps {
    iconPrepend?: ReactNode
    iconAppend?: ReactNode
    children: ReactNode
}

export default function InputIcon({ iconPrepend, iconAppend, children }: InputIconProps) {
    return (
        <div className="input-icon">
            {iconPrepend && <div className="input-icon-addon">{iconPrepend}</div>}
            {children}
            {iconAppend && <div className="input-icon-addon">{iconAppend}</div>}
        </div>
    )
}
</file>

<file path="src/components/Title/index.tsx">
import { ReactNode } from 'react'

interface TitleProps {
    children: ReactNode
}

export default function Title({ children }: TitleProps) {
    return (
        <div className={'mb-4'}>
            <h1 className={'display-5 text-center'}>{children}</h1>
        </div>
    )
}
</file>

<file path="src/hooks/reducer.ts">
import { useState } from 'react'

interface UseForceReducerReturn {
    value: number
    updateValue: () => void
    resetValue: () => void
}

export default function useForceReducer(): UseForceReducerReturn {
    const [value, setValue] = useState<number>(0)

    return {
        value,
        updateValue: () => setValue((value) => value + 1),
        resetValue: () => setValue(() => 0),
    }
}
</file>

<file path="src/types/globals.d.ts">
declare module '*.scss' {
    const classes: { [key: string]: string }
    export default classes
}

declare module '*.module.scss' {
    const classes: { [key: string]: string }
    export default classes
}

declare module '*.css' {
    const classes: { [key: string]: string }
    export default classes
}

declare module '*.module.css' {
    const classes: { [key: string]: string }
    export default classes
}

declare module '*.png' {
    const src: string
    export default src
}

declare module '*.jpg' {
    const src: string
    export default src
}

declare module '*.jpeg' {
    const src: string
    export default src
}

declare module '*.gif' {
    const src: string
    export default src
}

declare module '*.svg' {
    const src: string
    export default src
}

declare module '*.webp' {
    const src: string
    export default src
}
</file>

<file path="src/utils/array.ts">
/**
 * Splits an array into chunks of specified size
 */
export function chunk<T>(array: T[], size: number): T[][] {
    const chunks: T[][] = []
    for (let i = 0; i < array.length; i += size) {
        chunks.push(array.slice(i, i + size))
    }
    return chunks
}
</file>

<file path="src/utils/dates.ts">
/**
 * Calculate the number of days since a given date
 */
export function getDaysSince(date: Date): number {
    const now = new Date()
    const diffTime = Math.abs(now.getTime() - date.getTime())
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    return diffDays
}
</file>

<file path="src/utils/employees.ts">
interface Employee {
    name: string
    from: Date
    to?: Date
    coffeesPerDay: number
    hoursPerDay: number
}

/**
 * Calculate total working days for an employee
 */
function getEmployeeWorkingDays(employee: Employee): number {
    const endDate = employee.to || new Date()
    const diffTime = Math.abs(endDate.getTime() - employee.from.getTime())
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    return diffDays
}

/**
 * Calculate total hours worked by all employees
 */
export function getTotalEmployeeHours(employees: Employee[]): number {
    return employees.reduce((total, employee) => {
        const workingDays = getEmployeeWorkingDays(employee)
        return total + workingDays * employee.hoursPerDay
    }, 0)
}

/**
 * Calculate total coffees consumed by all employees
 */
export function getTotalEmployeeCoffees(employees: Employee[]): number {
    return employees.reduce((total, employee) => {
        const workingDays = getEmployeeWorkingDays(employee)
        return total + workingDays * employee.coffeesPerDay
    }, 0)
}
</file>

<file path="src/utils/tags.ts">
import fs from 'fs'
import matter from 'gray-matter'
import path from 'path'

const tagsDirectory = path.join(process.cwd(), 'src/content/tags')

export interface TagMetadata {
    name: string
    slug: string
    description?: string
    color?: string
    icon?: string
}

export interface TagFrontMatter {
    name: string
    description?: string
    color?: string
    icon?: string
}

// Ensure tags directory exists
export function ensureTagsDirectory() {
    if (!fs.existsSync(tagsDirectory)) {
        fs.mkdirSync(tagsDirectory, { recursive: true })
    }
}

// Get tag metadata by slug
export async function getTagBySlug(slug: string): Promise<TagMetadata> {
    ensureTagsDirectory()
    const fullPath = path.join(tagsDirectory, `${slug.toLowerCase()}.md`)

    if (!fs.existsSync(fullPath)) {
        return {
            name: slug,
            slug: slug.toLowerCase(),
        }
    }

    const fileContents = fs.readFileSync(fullPath, 'utf8')
    const { data } = matter(fileContents)

    const frontMatter = data as TagFrontMatter

    return {
        ...frontMatter,
        slug: slug.toLowerCase(),
    }
}
</file>

<file path="styles/components/_button.scss">
.btn-block {
  width: 100%;
}
</file>

<file path="styles/components/_card.scss">
.card.shadow {
  border: none;
}

.row-cards {
  min-width: 0;
  .row-cards {
    flex: 1;
  }
}

.row-deck>.col,
.row-deck>[class*=col-] {
  display: flex;
  align-items: stretch;

  .card {
    flex: 1 1 auto
  }
}
</file>

<file path="styles/components/_containers.scss">
// Single container class with breakpoint max-widths
.container-half,
  // 100% wide container at all breakpoints
.container-fluid-half {
  @include make-container();
}

// Responsive containers that are 100% wide until a breakpoint
@each $breakpoint, $container-max-width in $container-max-widths {
  .container-half-#{$breakpoint} {
    @extend .container-fluid-half;
  }

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    %responsive-container-half-#{$breakpoint} {
      max-width: $container-max-width / 2;
    }

    // Extend each breakpoint which is smaller or equal to the current breakpoint
    $extend-breakpoint: true;

    @each $name, $width in $grid-breakpoints {
      @if ($extend-breakpoint) {
        .container-half#{breakpoint-infix($name, $grid-breakpoints)} {
          @extend %responsive-container-half-#{$breakpoint};
        }

        // Once the current breakpoint is reached, stop extending
        @if ($breakpoint == $name) {
          $extend-breakpoint: false;
        }
      }
    }
  }
}
</file>

<file path="styles/components/_input-icon.scss">
.input-icon {
  position: relative;

  .form-control:not(:first-child),
  .form-select:not(:first-child),
  .twitter-typeahead:not(:first-child) .form-control,
  .twitter-typeahead:not(:first-child) .form-select,
  .form-control:not(:first-child):invalid,
  .form-select:not(:first-child):invalid,
  .form-control.is-invalid:not(:first-child),
  .form-select.is-invalid:not(:first-child),
  .form-select:not(:first-child) ~ .select2 .select2-selection__rendered {
    padding-left: 2.5rem;
  }

  .form-control:not(:last-child),
  .form-select:not(:last-child),
  .twitter-typeahead:not(:last-child) .form-control,
  .twitter-typeahead:not(:last-child) .form-select,
  .select2:not(:last-child) .select2-selection__rendered {
    padding-right: 2.5rem;
  }

  .form-select,
  .twitter-typeahead .form-control.is-invalid:last-of-type,
  .twitter-typeahead .form-control:invalid:last-of-type {
    background-image: none;
  }
}


.input-icon-addon {
  z-index: 2;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 2.5rem;
  color: $input-icon-color;
  opacity: 0.8;
  pointer-events: none;
  font-size: 1.125em;

  &:last-child {
    right: 0;
    left: auto;
  }

  a,
  .btn {
    pointer-events: auto;
  }
}
</file>

<file path="styles/components/_list-group.scss">
.list-group-flush > .list-group-item:last-child {
  border-bottom: var(--bs-list-group-border-width) solid var(--bs-list-group-border-color);
}
</file>

<file path="styles/components/_navbar.scss">
.navbar {
  .navbar-brand {
    font-family: $headings-font-family;
  }
}
</file>

<file path="styles/components/_offcanvas.scss">
.offcanvas-header {
  border-bottom: 1px solid $navbar-light-color;
}
</file>

<file path="styles/_core.scss">
//App variables
@import "variables";

//Bootstrap utils
@import "~bootstrap/scss/functions";
@import "~bootstrap/scss/variables";
@import "~bootstrap/scss/variables-dark";
@import "~bootstrap/scss/maps";
@import "~bootstrap/scss/mixins";
@import "~bootstrap/scss/utilities";
</file>

<file path=".prettierrc">
{
    "trailingComma": "es5",
    "tabWidth": 4,
    "singleQuote": true,
    "printWidth": 120,
    "semi": false
}
</file>

<file path="jsconfig.json">
{
    "compilerOptions": {
        "baseUrl": "src"
    }
}
</file>

<file path="next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {
    reactStrictMode: true,
    redirects: async () => {
        return [
            {
                source: '/cgv',
                destination: '/conditions-generales-de-vente',
                permanent: true,
            },
            {
                source: '/wp-content/uploads/2019/07/CGV.pdf',
                destination: '/pdf/CGV.pdf',
                permanent: true,
            },
            {
                source: '/wp-content/uploads/2020/09/alejandro-escamilla-BbQLHCpVUqA-unsplash.jpg',
                destination: '/images/home.jpg',
                permanent: true,
            },
            ...[
                '/wp-content/uploads/2021/11/logo-wordpress-4096.png',
                '/wp-content/uploads/2021/11/logo-wordpress-1024.png',
                '/wp-content/uploads/2021/11/logo-horizontal-4096.png',
                '/wp-content/uploads/2021/11/logo-horizontal-1024.png',
                '/wp-content/uploads/2020/06/logo-with-name-landscape-901.png',
                '/wp-content/uploads/2020/06/logo-with-name-landscape-1802.png',
                '/wp-content/uploads/2020/06/logo-with-name-landscape-2048.png',
                '/wp-content/uploads/2020/06/logo-with-name-landscape-1024.png',
                '/wp-content/uploads/2020/06/logo-with-name-landscape-4096.png',
                '/wp-content/uploads/2019/07/cropped-landscape_logo-e1562273697704.png',
                '/wp-content/uploads/2019/07/landscape_logo-1.png',
                '/wp-content/uploads/2019/07/landscape_logo-e1562273697704.png',
            ].map(function (old) {
                return {
                    source: old,
                    destination: '/images/logo-horizontal-4096.png',
                    permanent: true,
                }
            }),
            ...[
                '/wp-content/uploads/2021/11/logo-4096.png',
                '/wp-content/uploads/2020/06/logo-square-4096.png',
                '/wp-content/uploads/2019/07/cropped-logo-512.png',
                '/wp-content/uploads/2019/07/logo-512.png',
            ].map(function (old) {
                return {
                    source: old,
                    destination: '/images/logo-4096.png',
                    permanent: true,
                }
            }),
            ...[
                '/wp-content/uploads/2019/07/full_logo.png',
                '/wp-content/uploads/2019/07/full_logo.jpg',
            ].map(function (old) {
                return {
                    source: old,
                    destination: '/images/logo-vertical-light-4096.png',
                    permanent: true,
                }
            }),
        ]
    }
}

export default nextConfig;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"],
      "react": ["./node_modules/@types/react"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="src/app/index.module.scss">
.bgWrap {
    position: relative;
    height: 100vh;
    width: 100%;
    overflow: hidden;
}

.backdrop {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
    width: 100%;
    height: 100%;
    opacity: 0.33;
    background: #000;
}

.bgLight2 {
    background: #f4f6fd;
}

.contentWrapper {
    position: absolute;
    z-index: 2;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: white;
}

.contentWrapper h1 {
    font-size: clamp(2.5rem, 5vw, 5rem);
    line-height: 1;
    font-weight: 700;
}

.contentWrapper h1 span {
    margin-top: 0.75rem;
    font-size: clamp(1.5rem, 3vw, 2.5rem);
    display: block;
    text-transform: uppercase;
    line-height: 1.2;
}
</file>

<file path="src/components/Button/index.tsx">
import { ButtonHTMLAttributes, forwardRef, ReactNode } from 'react'

import { cn } from '@/utils/lib'

export interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
    variant?: 'primary' | 'secondary' | 'sub-primary' | 'danger'
    size?: 'sm' | 'md' | 'lg'
    as?: 'a'
    href?: string
    children: ReactNode
}

const Button = forwardRef<HTMLButtonElement | HTMLAnchorElement, ButtonProps>(
    ({ variant = 'primary', size = 'md', as, href, className, children, ...props }, ref) => {
        const baseClasses =
            'inline-block font-medium rounded transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2'

        const variantClasses = {
            primary: 'bg-primary text-white hover:bg-primary-light focus:ring-primary',
            secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-600',
            'sub-primary': 'bg-sub-primary text-white hover:bg-yellow-500 focus:ring-sub-primary',
            danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-600',
        }

        const sizeClasses = {
            sm: 'px-3 py-1.5 text-sm',
            md: 'px-5 py-2.5 text-base',
            lg: 'px-6 py-3 text-lg',
        }

        const classes = cn(baseClasses, variantClasses[variant], sizeClasses[size], className)

        if (as === 'a' && href) {
            return (
                <a ref={ref as React.Ref<HTMLAnchorElement>} href={href} className={classes}>
                    {children}
                </a>
            )
        }

        return (
            <button
                ref={ref as React.Ref<HTMLButtonElement>}
                className={classes}
                {...(props as ButtonHTMLAttributes<HTMLButtonElement>)}
            >
                {children}
            </button>
        )
    }
)

Button.displayName = 'Button'

export default Button
</file>

<file path="src/components/CallToAction/index.module.scss">
.callToAction {
    padding: 1rem 4rem;
    font-size: 1.5rem;
}
</file>

<file path="src/components/CallToAction/index.tsx">
import CallToActionButton from '@/components/CallToActionButton'

export default function CallToAction() {
    return (
        <div className={'text-center py-5'}>
            <CallToActionButton size={'lg'} variant="primary" className="px-16 py-4 text-2xl">
                Demander un devis
            </CallToActionButton>
        </div>
    )
}
</file>

<file path="src/components/CallToActionButton/index.tsx">
import { useCallback, useState } from 'react'

import Button, { ButtonProps } from '@/components/Button'
import ContactForm from '@/components/ContactForm'
import Modal from '@/components/Modal'
import useForceReducer from '@/hooks/reducer'

type CallToActionButtonProps = Omit<ButtonProps, 'onClick'>

function MyVerticallyCenteredModal({ onHide, show }: { onHide: () => void; show: boolean }) {
    const { value: formIdValue, updateValue: forceIsFormSubmitted, resetValue: resetFormSubmitted } = useForceReducer()
    const [showSendButton, setShowSendButton] = useState<boolean>(true)
    const [isFormPending, setIsFormPending] = useState<boolean>(false)

    const onPending = useCallback(() => {
        setIsFormPending(true)
    }, [setIsFormPending])

    const onFinish = useCallback(() => {
        setShowSendButton(false)
        resetFormSubmitted()
    }, [setShowSendButton, resetFormSubmitted])

    const hideAndHandleFormSubmit = useCallback(() => {
        onHide()
        resetFormSubmitted()
        setShowSendButton(true)
    }, [onHide, resetFormSubmitted, setShowSendButton])

    return (
        <Modal backdrop="static" onHide={hideAndHandleFormSubmit} show={show} size="lg" centered>
            <Modal.Header closeButton>
                <Modal.Title>Contact / Demande de devis</Modal.Title>
            </Modal.Header>
            <Modal.Body>
                <ContactForm isSubmitted={formIdValue > 0} onFinish={onFinish} onPending={onPending}></ContactForm>
            </Modal.Body>
            <Modal.Footer>
                <Button onClick={hideAndHandleFormSubmit} variant="secondary">
                    Fermer
                </Button>
                {showSendButton && (
                    <Button onClick={() => forceIsFormSubmitted()} disabled={isFormPending}>
                        Envoyer
                    </Button>
                )}
            </Modal.Footer>
        </Modal>
    )
}

export default function CallToActionButton({ children, ...props }: CallToActionButtonProps) {
    const [modalShow, setModalShow] = useState<boolean>(false)

    const renderModal = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {
        e.preventDefault()
        setModalShow(true)
    }, [])

    return (
        <>
            <Button onClick={renderModal} {...props}>
                {children}
            </Button>
            <MyVerticallyCenteredModal show={modalShow} onHide={() => setModalShow(false)} />
        </>
    )
}
</file>

<file path="src/components/ContactForm/index.tsx">
import axios from 'axios'
import { useCallback, useEffect, useState } from 'react'
import { useForm } from 'react-hook-form'

import Group from '@/components/Form/Group'
import Help from '@/components/Form/Help'
import Input from '@/components/Form/Input'
import Textarea from '@/components/Form/Textarea'
import { Enveloppe, Person, Phone } from '@/components/Icons'

interface ContactFormData {
    name: string
    email: string
    phone: string
    message: string
}

interface ContactFormProps {
    isSubmitted?: boolean
    onFinish?: (data: ContactFormData) => void
    onPending?: () => void
}

export default function ContactForm({ isSubmitted = false, onFinish, onPending }: ContactFormProps) {
    const [pending, setPending] = useState<boolean>(false)
    const [success, setSuccess] = useState<boolean>(false)
    const [error, setError] = useState<boolean>(false)

    const {
        register,
        handleSubmit,
        reset,
        formState: { touchedFields, errors },
    } = useForm<ContactFormData>({
        mode: 'onSubmit',
        reValidateMode: 'onChange',
        criteriaMode: 'all',
    })

    const onSubmit = useCallback(
        async (data: ContactFormData) => {
            setPending(true)
            if (onPending) {
                onPending()
            }

            setPending(false)
            if (onFinish) {
                onFinish(data)
            }

            return axios({
                method: 'POST',
                url: 'https://formspree.io/f/maykddyv',
                data,
            })
                .then(() => {
                    setPending(false)
                    setSuccess(true)
                    setError(false)
                    reset()
                    if (onFinish) {
                        onFinish(data)
                    }
                })
                .catch(() => {
                    setPending(false)
                    setSuccess(false)
                    setError(true)
                })
        },
        [reset, onFinish, onPending]
    )

    useEffect(() => {
        if (isSubmitted) {
            handleSubmit(onSubmit)()
        }
    }, [isSubmitted, handleSubmit, onSubmit])

    const isFilled = (fieldName: keyof ContactFormData): boolean => !!touchedFields[fieldName]
    const isValid = (fieldName: keyof ContactFormData): boolean => isFilled(fieldName) && !errors[fieldName]
    const isInvalid = (fieldName: keyof ContactFormData): boolean => !!errors[fieldName]

    if (success) {
        return (
            <div className="bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded mb-0" role="alert">
                <h4 className="font-bold mb-2">Merci !</h4>
                <p>Votre message a bien été envoyé, je vous répondrai dans les plus brefs délais.</p>
            </div>
        )
    }

    return (
        <form onSubmit={handleSubmit(onSubmit)}>
            {error && (
                <div className="bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded mb-4">
                    Une erreur est survenue pendant l{"'"}envoi du formulaire.
                </div>
            )}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="col-span-1">
                    <Group valid={isValid('name')}>
                        <Input
                            id="name"
                            type="text"
                            autoComplete="name"
                            placeholder="Nom"
                            disabled={pending}
                            iconPrepend={<Person />}
                            isValid={isValid('name')}
                            isInvalid={isInvalid('name')}
                            {...register('name', {
                                required: 'Veuillez fournir votre nom',
                                maxLength: {
                                    value: 40,
                                    message: 'Le nom est trop long (40 caractères max)',
                                },
                            })}
                        />
                        {isInvalid('name') && <Help type={'invalid'}>{errors.name?.message}</Help>}
                    </Group>
                </div>
                <div className="col-span-1">
                    <Group valid={isValid('email')}>
                        <Input
                            id="email"
                            type="email"
                            autoComplete="email"
                            placeholder="Email"
                            disabled={pending}
                            iconPrepend={<Enveloppe />}
                            isValid={isValid('email')}
                            isInvalid={isInvalid('email')}
                            required
                            {...register('email', {
                                required: 'Veuillez fournir votre email',
                                pattern: {
                                    value: /\S+@\S+\.\S+/,
                                    message: "L'email n'est pas au bon format",
                                },
                            })}
                        />
                        {isInvalid('email') && <Help type={'invalid'}>{errors.email?.message}</Help>}
                    </Group>
                </div>
                <div className="col-span-1 md:col-span-2">
                    <Group valid={isValid('phone')}>
                        <Input
                            id="phone"
                            type="text"
                            autoComplete="tel"
                            placeholder="Téléphone"
                            disabled={pending}
                            iconPrepend={<Phone />}
                            isValid={isValid('phone')}
                            isInvalid={isInvalid('phone')}
                            required
                            {...register('phone', {
                                required: 'Veuillez fournir votre numéro de téléphone afin que je puisse vous rappeler',
                            })}
                        />
                        {isInvalid('phone') && <Help type={'invalid'}>{errors.phone?.message}</Help>}
                    </Group>
                </div>
                <div className="col-span-1 md:col-span-2">
                    <Group groupClassName={'mb-0'} valid={isValid('message')}>
                        <Textarea
                            id="message"
                            rows={7}
                            placeholder="Message"
                            disabled={pending}
                            isValid={isValid('message')}
                            isInvalid={isInvalid('message')}
                            required
                            {...register('message', {
                                required: 'Veuillez écrire votre message',
                            })}
                        />
                        {isInvalid('message') && <Help type={'invalid'}>{errors.message?.message}</Help>}
                    </Group>
                </div>
            </div>
            {/* We use hidden input submit to submit form with "Enter" keystroke */}
            <input type={'submit'} className="hidden" />
        </form>
    )
}
</file>

<file path="src/components/Footer/index.module.scss">
.footer a {
    color: white;
    text-decoration: none;
}

.footer a:hover {
    color: orange;
    text-decoration: underline;
}

.footer .topFooter {
    background: rgba(0, 0, 0, 0.2);
}

.footer .subFooter {
    border-top: 1px solid rgba(255, 255, 255, 0.1);
}
</file>

<file path="src/components/Form/Group.tsx">
import { ReactNode } from 'react'

import { cn } from '@/utils/lib'

import Label from './Label'

interface GroupProps {
    label?: string
    groupClassName?: string
    id?: string
    valid?: boolean
    children: ReactNode
}

export default function Group({ label, groupClassName = 'mb-4', id, valid = true, children }: GroupProps) {
    return (
        <div className={groupClassName}>
            {label && <Label label={label} htmlFor={id} className={cn({ 'text-red-600': !valid })}></Label>}
            {children}
        </div>
    )
}
</file>

<file path="src/components/Form/Help.tsx">
import { ReactNode } from 'react'

interface HelpProps {
    type?: 'help' | 'invalid' | 'valid'
    children: ReactNode
}

export default function Help({ type, children }: HelpProps) {
    if (type === 'help') {
        return <div className="text-sm text-gray-500 mt-1">{children}</div>
    }

    if (type === 'invalid') {
        return <div className="text-sm text-red-600 mt-1 block">{children}</div>
    }

    return <div className="text-sm text-green-600 mt-1 block">{children}</div>
}
</file>

<file path="src/components/Form/Label.tsx">
import { LabelHTMLAttributes, ReactNode } from 'react'

interface LabelProps extends LabelHTMLAttributes<HTMLLabelElement> {
    label?: string
    children?: ReactNode
}

export default function Label({ label, htmlFor, children, className, ...props }: LabelProps) {
    return (
        <label htmlFor={htmlFor} className={`block text-sm font-medium mb-2 ${className || ''}`} {...props}>
            {label}
            {children}
        </label>
    )
}
</file>

<file path="src/components/Icons/index.tsx">
import { faCalendar } from '@fortawesome/free-solid-svg-icons/faCalendar'
import { faCheck } from '@fortawesome/free-solid-svg-icons/faCheck'
import { faClock } from '@fortawesome/free-solid-svg-icons/faClock'
import { faCloudBolt } from '@fortawesome/free-solid-svg-icons/faCloudBolt'
import { faCode } from '@fortawesome/free-solid-svg-icons/faCode'
import { faDownload } from '@fortawesome/free-solid-svg-icons/faDownload'
import { faEnvelope } from '@fortawesome/free-solid-svg-icons/faEnvelope'
import { faFileContract } from '@fortawesome/free-solid-svg-icons/faFileContract'
import { faLightbulb } from '@fortawesome/free-solid-svg-icons/faLightbulb'
import { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons/faMapMarkerAlt'
import { faPhone } from '@fortawesome/free-solid-svg-icons/faPhone'
import { faUser } from '@fortawesome/free-solid-svg-icons/faUser'
import { faXmark } from '@fortawesome/free-solid-svg-icons/faXmark'
import { FontAwesomeIcon, FontAwesomeIconProps } from '@fortawesome/react-fontawesome'

import { cn } from '@/utils/lib'

type BaseIconProps = FontAwesomeIconProps

type IconProps = Omit<BaseIconProps, 'icon'>

export function BaseIcon({ className, ...props }: BaseIconProps) {
    return <FontAwesomeIcon className={cn('icon', className)} {...props} />
}

export const Calendar = (props: IconProps) => <BaseIcon icon={faCalendar} {...props} />
export const Download = (props: IconProps) => <BaseIcon icon={faDownload} {...props} />
export const Map = (props: IconProps) => <BaseIcon icon={faMapMarkerAlt} {...props} />
export const Clock = (props: IconProps) => <BaseIcon icon={faClock} {...props} />
export const Phone = (props: IconProps) => <BaseIcon icon={faPhone} {...props} />
export const Person = (props: IconProps) => <BaseIcon icon={faUser} {...props} />
export const User = (props: IconProps) => <BaseIcon icon={faUser} {...props} />
export const Enveloppe = (props: IconProps) => <BaseIcon icon={faEnvelope} {...props} />
export const Check = (props: IconProps) => <BaseIcon icon={faCheck} {...props} />
export const CloudBolt = (props: IconProps) => <BaseIcon icon={faCloudBolt} {...props} />
export const Code = (props: IconProps) => <BaseIcon icon={faCode} {...props} />
export const LightBulb = (props: IconProps) => <BaseIcon icon={faLightbulb} {...props} />
export const FileContract = (props: IconProps) => <BaseIcon icon={faFileContract} {...props} />
export const XMark = (props: IconProps) => <BaseIcon icon={faXmark} {...props} />
</file>

<file path="src/components/IconWrapper/index.module.scss">
.iconWrapper {
    background-color: white;
    border: 8px solid #f8f8f8;
    border-radius: 100%;
    color: #ffaf30;
    width: 10em;
    height: 10em;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    transition:
        background-color 0.3s ease-in-out,
        color 0.3s ease-in-out;
    position: relative;
}

.iconWrapper:before {
    content: '';
    display: block;
    position: absolute;
    left: 0;
    top: 0;
    border-radius: 100%;
    width: 100%;
    height: 100%;
    border: 1px solid #e2e2e2;
    transition: border-color 0.3s ease-in-out;
}

.iconWrapper:hover {
    background-color: #ffaf30;
    color: white;
}

.iconWrapper:hover:before {
    border-color: #ffaf30;
}

.iconWrapper .icon > svg {
    width: 4.5em;
    height: 4.5em;
}
</file>

<file path="src/components/Layout/DefaultLayout/index.module.scss">
.layout {
    min-height: 100vh;
    display: flex;
    flex-direction: column;

    > main {
        flex: 1;
    }
}
</file>

<file path="src/components/Layout/DefaultLayout/index.tsx">
'use client'

import { ReactNode } from 'react'

import Footer from '@/components/Footer'
import Navbar from '@/components/Navbar'

interface DefaultLayoutProps {
    children: ReactNode
}

export default function DefaultLayout({ children }: DefaultLayoutProps) {
    return (
        <div className="min-h-screen flex flex-col">
            <Navbar />
            <main className="flex-1">{children}</main>
            <Footer />
        </div>
    )
}
</file>

<file path="src/components/MDXImage/index.tsx">
import Image from 'next/image'
import { ComponentProps } from 'react'

import { cn } from '@/utils/lib'

interface MDXImageProps extends Omit<ComponentProps<typeof Image>, 'src'> {
    src: string
    alt: string
    width?: number
    height?: number
    caption?: string
}

export function MDXImage({ src, alt = '', width = 800, height = 600, caption, className, ...props }: MDXImageProps) {
    let imageSrc = src
    // Handle external images
    if (!imageSrc.startsWith('/')) {
        imageSrc = `/${imageSrc}`
    }

    return (
        <figure className="my-4 block">
            <Image
                src={imageSrc}
                alt={alt}
                width={width}
                height={height}
                className={cn(className, 'w-full block rounded')}
                {...props}
            />
            {caption && <figcaption className="text-center text-gray-600 mt-2 text-sm">{caption}</figcaption>}
        </figure>
    )
}
</file>

<file path="src/components/Navbar/index.module.scss">
.navbar {
    position: absolute;
}

.navbar.floating {
    position: fixed;
    opacity: 1;
}

.navbar.floating img {
    width: auto;
    max-height: 40px;
}
</file>

<file path="src/components/Section/index.module.scss">
.sectionWithPaddingX {
    padding-left: 1rem;
    padding-right: 1rem;
}

@media (min-width: 1024px) {
    .sectionWithPaddingX {
        padding-left: 2rem;
        padding-right: 2rem;
    }
}

@media (min-width: 1280px) {
    .sectionWithPaddingX {
        padding-left: 4rem;
        padding-right: 4rem;
    }
}

.sectionWithPaddingY {
    padding-top: 1rem;
    padding-bottom: 1rem;
}

@media (min-width: 1024px) {
    .sectionWithPaddingY {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
}

@media (min-width: 1280px) {
    .sectionWithPaddingY {
        padding-top: 4rem;
        padding-bottom: 4rem;
    }
}

.sectionXl {
    height: 100vh;
}

@media (min-width: 640px) {
    .sectionXl {
        height: 75vh;
    }
}

@media (min-width: 768px) {
    .sectionXl {
        height: 56.25vh;
    }
}

@media (min-width: 1024px) {
    .sectionXl {
        height: 42.86vh;
    }
}
</file>

<file path="src/content/projects/api-iris.mdx">
---
title: "API Iris : Reprise d'une API de gestion de commandes dentaires"
date: '2025-08-02'
projectDate: '2023-06-01'
excerpt: "Dans le cadre de la modernisation de son infrastructure logicielle, Scan4All a sollicité SILARHI pour la reprise et la maintenance d'une API Symfony existante, développée par un prestataire précédent."
author: 'Guillaume Sainthillier'
tags: ['Symfony', 'API', 'MySQL', 'Docker', 'Migration', 'Reprise']
published: true
---

## 👨‍⚕️ Le client

Scan4All est une entreprise française située à Labège (Haute‑Garonne), spécialisée en recherche et développement pour la **dentisterie numérique** grâce à son scanner intra‑oral 3D **Iris®**.

## 🛠️ Notre intervention

L'intervention de SILARHI s'est articulée autour de deux objectifs principaux :

- Reprendre et maintenir le **code existant** développé sous Symfony 4 par une autre société.
- Migrer l'ensemble de l'application vers **PHP 8.2** et **Symfony 6.3**, avec mise à jour et migration de tous les composants logiciels.

Nous avons également :

- Migré les 5 **bundles métiers** vers une architecture compatible avec les nouvelles versions du framework.
- Converti les **métadonnées Doctrine YAML** en annotations PHP.
- Mis à jour les **EventListeners**, les services, ainsi que plusieurs bibliothèques tierces (upload, mailer, parsing)
- Préparé l'application à une **exploitation durable et modulable**, avec un socle technique pérenne

L'ensemble du code a été adapté pour suivre les bonnes pratiques modernes (namespace, PSR, annotations, gestion des dépendances via Composer, etc.).

## 🚀 Résultats obtenus

- API opérationnelle avec les **dernières versions stables de Symfony et PHP**.
- Architecture compatible avec des évolutions futures (modularité, intégrations).
- Rationalisation du code et des dépendances techniques.
- Transfert de la **maintenance** complet vers SILARHI.

## ⚙️ Technologies utilisées

- Symfony 6.3
- PHP 8.2
- Doctrine 3
- TWIG 3
- MySQL 5.7
- Docker
- Composer
</file>

<file path="src/content/projects/api-tracking.mdx">
---
title: "API Tracking : Développement d'une API sur mesure pour la gestion de code d'installation logiciels"
date: '2025-08-02'
projectDate: '2025-06-01'
excerpt: "Afin de moderniser ses processus d'installation et de gestion de licences, Scan4All a sollicité SILARHI pour développer une API REST sécurisée."
author: 'Guillaume Sainthillier'
tags: ['Symfony', 'API', 'ApiPlatform', 'PostgreSQL', 'Docker']
published: true
---

## 👨‍⚕️ Le client

Scan4All est une entreprise française située à Labège (Haute‑Garonne), spécialisée en recherche et développement pour la **dentisterie numérique** grâce à son scanner intra‑oral 3D **Iris®**.

## 🛠️ Notre intervention

SILARHI a conçu une **API via Symfony**, bâtie sur la **structure de base de données fournie par le client**, avec une architecture REST sécurisée par authentification Bearer.

Nous avons également **adapté une application existante** pour qu'elle puisse utiliser cette nouvelle API, tout en développant de nouveaux endpoints pour répondre aux besoins spécifiques de Scan4All.

L’API centralise les interactions entre les postes installés et l’infrastructure serveur et assure **l’intégration avec des logiciels internes** utilisés par le client.

## ⚙️ Technologies utilisées

- Symfony pour le développement de l'API
- PostgreSQL comme base de données
- Docker pour le déploiement et la conteneurisation
- APIPlatform pour la gestion des endpoints REST
- Authentification Bearer pour sécuriser les échanges
</file>

<file path="src/content/projects/front-iris.mdx">
---
title: "Front Iris : Reprise d'une application de gestion de commandes dentaires"
date: '2025-08-02'
projectDate: '2024-03-01'
excerpt: "Dans le cadre du rebranding de son scanner Iris®, Scan4All a sollicité SILARHI pour la reprise et l'évolution d'une application React existante, développée par un prestataire précédent."
author: 'Guillaume Sainthillier'
tags: ['React', 'Migration', 'Reprise']
published: true
---

## 👨‍⚕️ Le client

Scan4All est une entreprise française située à Labège (Haute‑Garonne), spécialisée en recherche et développement pour la **dentisterie numérique** grâce à son scanner intra‑oral 3D **Iris®**.

## 🛠️ Notre intervention

L'intervention de SILARHI s'est articulée autour de deux objectifs principaux :

- Reprendre et maintenir le **code existant** développé sous Symfony 4 par une autre société.
- Migrer l'ensemble de l'application vers **PHP 8.2** et **Symfony 6.3**, avec mise à jour et migration de tous les composants logiciels.

Nous avons également :

- Migré les 5 **bundles métiers** vers une architecture compatible avec les nouvelles versions du framework.
- Converti les **métadonnées Doctrine YAML** en annotations PHP.
- Mis à jour les **EventListeners**, les services, ainsi que plusieurs bibliothèques tierces (upload, mailer, parsing)
- Préparé l'application à une **exploitation durable et modulable**, avec un socle technique pérenne

L'ensemble du code a été adapté pour suivre les bonnes pratiques modernes (namespace, PSR, annotations, gestion des dépendances via Composer, etc.).

## 🚀 Résultats obtenus

- API opérationnelle avec les **dernières versions stables de Symfony et PHP**.
- Architecture compatible avec des évolutions futures (modularité, intégrations).
- Rationalisation du code et des dépendances techniques.
- Transfert de la **maintenance** complet vers SILARHI.

## ⚙️ Technologies utilisées

- Symfony 6.3
- PHP 8.2
- Doctrine 3
- TWIG 3
- MySQL 5.7
- Docker
- Composer
</file>

<file path="src/content/tags/react.md">
---
name: 'React'
description: 'React est une bibliothèque JavaScript libre développée par Facebook pour créer des interfaces utilisateur interactives et réactives. Elle utilise un DOM virtuel et une approche basée sur les composants pour construire des applications web modernes et performantes.'
color: '#61DAFB'
icon: 'atom'
---
</file>

<file path="src/content/tags/symfony.md">
---
name: 'Symfony'
description: 'Symfony est un framework PHP libre et open source qui suit le pattern MVC. Il fournit une architecture solide et des composants réutilisables pour développer des applications web modernes et performantes.'
color: '#1A171B'
icon: 'cogs'
---
</file>

<file path="src/utils/lib.ts">
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
    return twMerge(clsx(inputs))
}
</file>

<file path="src/utils/project.ts">
import fs from 'fs'
import matter from 'gray-matter'
import path from 'path'

import { getTagBySlug, type TagMetadata } from './tags'

const projectsDirectory = path.join(process.cwd(), 'src/content/projects')

export interface ProjectProject {
    slug: string
    title: string
    date: string
    updateDate?: string
    excerpt?: string
    author: string
    tags: TagMetadata[]
    published: boolean
    content: string
    readingTime: string
}

export interface ProjectFrontMatter {
    title: string
    date: string
    updateDate?: string
    excerpt?: string
    author?: string
    tags?: string[]
    published?: boolean
}

// Ensure project directory exists
export function ensureProjectDirectory() {
    if (!fs.existsSync(projectsDirectory)) {
        fs.mkdirSync(projectsDirectory, { recursive: true })
    }
}

// Get all project project slugs
export function getAllProjectSlugs(): string[] {
    ensureProjectDirectory()
    if (!fs.existsSync(projectsDirectory)) {
        return []
    }

    const fileNames = fs.readdirSync(projectsDirectory)
    return fileNames.filter((fileName) => fileName.endsWith('.mdx')).map((fileName) => fileName.replace(/\.mdx$/, ''))
}

// Calculate reading time
function calculateReadingTime(content: string): string {
    const wordsPerMinute = 200
    const words = content.split(/\s+/).length
    const minutes = Math.ceil(words / wordsPerMinute)
    return `${minutes} min de lecture`
}

// Get a single project project by slug
export async function getProjectBySlug(slug: string): Promise<ProjectProject | null> {
    ensureProjectDirectory()
    const fullPath = path.join(projectsDirectory, `${slug}.mdx`)

    if (!fs.existsSync(fullPath)) {
        return null
    }

    const fileContents = fs.readFileSync(fullPath, 'utf8')
    const { data, content } = matter(fileContents)

    const frontMatter = data as ProjectFrontMatter

    // Only return published projects or if published is not defined
    if (frontMatter.published === false) {
        return null
    }

    const readingTime = calculateReadingTime(content)

    // Lookup tag metadata for each tag
    const tagSlugs = frontMatter.tags ?? []
    const tags = await Promise.all(tagSlugs.map(async (tagSlug) => await getTagBySlug(tagSlug)))

    return {
        slug,
        ...frontMatter,
        author: frontMatter.author ?? 'SILARHI',
        tags,
        published: frontMatter.published ?? false,
        content,
        readingTime,
    }
}

// Get all project projects
export async function getAllProjects(): Promise<ProjectProject[]> {
    const slugs = getAllProjectSlugs()
    const projects = await Promise.all(slugs.map((slug) => getProjectBySlug(slug)))

    return projects
        .filter((project): project is ProjectProject => project !== null)
        .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
}

// Get projects by tag
export async function getProjectsByTag(tag: string): Promise<ProjectProject[]> {
    const allProjects = await getAllProjects()
    return allProjects.filter((project) =>
        project.tags.some((projectTag) => projectTag.slug.toLowerCase() === tag.toLowerCase())
    )
}

// Get all unique tags
export async function getAllProjectTags(): Promise<TagMetadata[]> {
    const allProjects = await getAllProjects()
    const tagSlugs = {} as Record<string, TagMetadata>

    allProjects.forEach((project) => {
        project.tags.forEach((tag) => (tagSlugs[tag.slug] = tag))
    })

    return Object.values(tagSlugs).sort((a, b) => a.slug.localeCompare(b.slug))
}
</file>

<file path="eslint.config.mjs">
import { FlatCompat } from '@eslint/eslintrc'
import { dirname } from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

const compat = new FlatCompat({
    baseDirectory: __dirname,
})

const eslintConfig = [
    ...compat.extends('next/core-web-vitals', "next/typescript", 'plugin:prettier/recommended'),
    ...compat.plugins('simple-import-sort'),
    {
        rules: {
            'simple-import-sort/imports': 'error',
            'simple-import-sort/exports': 'error',
        },
    },
]

export default eslintConfig
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    '@tailwindcss/postcss': {},
    autoprefixer: {},
  },
}
</file>

<file path="src/app/projets/page.tsx">
import { Metadata } from 'next'
import Link from 'next/link'

import HeroTitle from '@/components/HeroTitle'
import ProjectCard from '@/components/ProjectCard'
import Section from '@/components/Section'
import { getAllProjects, getAllProjectTags } from '@/utils/project'

export const metadata: Metadata = {
    title: 'Projets récents - SILARHI',
    description: 'Découvrez nos projets sur le développement web, PHP, Symfony et bien plus encore.',
}

export default async function ProjectPage() {
    const projects = await getAllProjects()
    const tags = await getAllProjectTags()

    return (
        <>
            <HeroTitle title="Projets récents" subtitle="Découvrez nos derniers projets sur le développement web" />

            <Section>
                {tags.length > 0 && (
                    <div className="mb-5">
                        <h3 className="text-lg mb-3">Tous les thèmes</h3>
                        <div className="flex flex-wrap gap-2">
                            {tags.map((tag) => (
                                <Link
                                    key={tag.slug}
                                    href={`/projets/tag/${tag.slug}`}
                                    className="px-4 py-2 border border-primary text-primary rounded text-sm hover:bg-primary hover:text-white transition-colors"
                                >
                                    {tag.name}
                                </Link>
                            ))}
                        </div>
                    </div>
                )}

                {projects.length === 0 ? (
                    <div className="text-center py-5">
                        <p className="text-gray-600">Aucun projet publié pour le moment.</p>
                    </div>
                ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {projects.map((project) => (
                            <div key={project.slug}>
                                <ProjectCard project={project} />
                            </div>
                        ))}
                    </div>
                )}
            </Section>
        </>
    )
}
</file>

<file path="src/app/layout.tsx">
import './globals.css'
import '@fortawesome/fontawesome-svg-core/styles.css'

import { config } from '@fortawesome/fontawesome-svg-core'
import type { Metadata } from 'next'
import Script from 'next/script'
import { ReactNode } from 'react'

import DefaultLayout from '@/components/Layout/DefaultLayout'

import { montserrat } from './fonts'

config.autoAddCss = false

export const metadata: Metadata = {
    title: `Agence de développement Web PHP à Toulouse - SILARHI`,
    description: `Développement d'applications Web à Toulouse et en France. Donnez vie à vos idées d'applications responsive & mobiles. Devis rapide et gratuit.`,
    icons: {
        icon: '/icon.png',
        shortcut: '/shortcut-icon.png',
        apple: '/apple-icon.png',
        other: {
            rel: 'apple-touch-icon-precomposed',
            url: '/apple-touch-icon-precomposed.png',
        },
    },
}

interface RootLayoutProps {
    children: ReactNode
}

export default function RootLayout({ children }: RootLayoutProps) {
    return (
        <html lang="en" data-scroll-behavior="smooth">
            <head>
                <meta name="msapplication-TileColor" content="#2b5797" />
                <meta name="msapplication-TileImage" content="/mstile-144x144.png" />
                <meta name="theme-color" content="#ffffff" />
                <link rel="manifest" href="/site.webmanifest" />
                <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
                <Script src="https://www.googletagmanager.com/gtag/js?id=G-PDTD5T600H" />
                <Script id="google-analytics">
                    {`
                  window.dataLayer = window.dataLayer || [];
                  function gtag(){dataLayer.push(arguments);}
                  gtag('js', new Date());
         
                  gtag('config', 'G-PDTD5T600H');
                `}
                </Script>
            </head>
            <body className={`${montserrat.className} ${montserrat.variable}`}>
                <DefaultLayout>{children}</DefaultLayout>
            </body>
        </html>
    )
}
</file>

<file path="src/app/sitemap.ts">
import { MetadataRoute } from 'next'

import { getAllProjects, getAllProjectTags } from '@/utils/project'

const getBaseUrl = () => {
    if (process.env.NEXT_PUBLIC_SITE_URL) {
        return process.env.NEXT_PUBLIC_SITE_URL
    }

    if (process.env.VERCEL_URL) {
        return `https://${process.env.VERCEL_URL}`
    }

    return 'http://localhost:3000'
}

export default async function sitemap(): Promise<MetadataRoute.Sitemap> {
    const baseUrl = getBaseUrl()

    // Static pages
    const staticPages = [
        {
            url: baseUrl,
            lastModified: new Date(),
            changeFrequency: 'monthly' as const,
            priority: 1,
        },
        {
            url: `${baseUrl}/mentions-legales`,
            lastModified: new Date(),
            changeFrequency: 'yearly' as const,
            priority: 0.3,
        },
        {
            url: `${baseUrl}/conditions-generales-de-vente`,
            lastModified: new Date(),
            changeFrequency: 'yearly' as const,
            priority: 0.3,
        },
    ]

    // Projects pages
    const projectPages = [
        {
            url: `${baseUrl}/projets`,
            lastModified: new Date(),
            changeFrequency: 'monthly' as const,
            priority: 0.8,
        },
    ]

    try {
        // Get all projects
        const projects = await getAllProjects()
        const projectPosts = projects.map((project) => ({
            url: `${baseUrl}/projets/${project.slug}`,
            lastModified: new Date(project.date),
            changeFrequency: 'monthly' as const,
            priority: 0.7,
        }))

        // Get all project tags
        const projectTags = await getAllProjectTags()
        const projectTagPages = projectTags.map((tag) => ({
            url: `${baseUrl}/projets/tag/${tag.slug}`,
            lastModified: new Date(),
            changeFrequency: 'monthly' as const,
            priority: 0.4,
        }))

        return [...staticPages, ...projectPages, ...projectPosts, ...projectTagPages]
    } catch (error) {
        console.error('Error generating sitemap:', error)

        // Return at least the static pages if there's an error
        return [...staticPages, ...projectPages]
    }
}
</file>

<file path="src/components/Footer/index.tsx">
import Link from 'next/link'

export default function Footer() {
    return (
        <footer className="bg-primary text-white [&_a]:text-white [&_a]:no-underline [&_a:hover]:text-orange-500 [&_a:hover]:underline">
            <div className="py-5 bg-black/20">
                <div className="container mx-auto px-4 text-center">
                    <h4 className="text-2xl">Développement d{"'"}applications Web à Toulouse et en France</h4>
                </div>
            </div>
            <div className="py-4 border-t border-white/10">
                <div className="container mx-auto px-4">
                    <div>
                        ©&nbsp;{new Date().getFullYear()} SILARHI. Tous droits réservés &nbsp;|&nbsp;
                        <Link href={'/mentions-legales'}>Mentions légales</Link>
                        &nbsp;|&nbsp;
                        <Link href={'/conditions-generales-de-vente'}>CGV</Link>
                    </div>
                    <div>
                        {'Site développé par un '}
                        <a href="https://sainthillier.fr">développeur Web freelance à Toulouse</a>
                    </div>
                </div>
            </div>
        </footer>
    )
}
</file>

<file path="src/components/Form/Input.tsx">
import { forwardRef, InputHTMLAttributes, ReactNode } from 'react'

import { cn } from '@/utils/lib'

import InputIcon from './InputIcon'

interface BaseWidgetProps extends InputHTMLAttributes<HTMLInputElement> {
    value?: string | number
    isValid?: boolean
    isInvalid?: boolean
}

interface InputProps extends BaseWidgetProps {
    iconPrepend?: ReactNode
    iconAppend?: ReactNode
}

const BaseWidget = forwardRef<HTMLInputElement, BaseWidgetProps>(
    ({ value, isValid, isInvalid, className, ...props }, ref) => {
        const baseClasses = 'w-full px-3 py-2 border rounded focus:outline-none focus:ring-2'
        const validClasses = isValid ? 'border-green-500 focus:ring-green-500' : ''
        const invalidClasses = isInvalid ? 'border-red-500 focus:ring-red-500' : ''
        const defaultClasses = !isValid && !isInvalid ? 'border-gray-300 focus:ring-primary' : ''

        return (
            <input
                ref={ref}
                defaultValue={value}
                className={cn(baseClasses, validClasses, invalidClasses, defaultClasses, className)}
                {...props}
            />
        )
    }
)

BaseWidget.displayName = 'BaseWidget'

const Input = forwardRef<HTMLInputElement, InputProps>(
    ({ value, isValid, isInvalid, iconPrepend, iconAppend, ...props }, ref) => {
        if (iconPrepend || iconAppend) {
            return (
                <InputIcon iconPrepend={iconPrepend} iconAppend={iconAppend}>
                    <BaseWidget ref={ref} isValid={isValid} isInvalid={isInvalid} value={value} {...props} />
                </InputIcon>
            )
        }

        return <BaseWidget ref={ref} isValid={isValid} isInvalid={isInvalid} value={value} {...props} />
    }
)

Input.displayName = 'Input'

export default Input
</file>

<file path="src/components/Form/Textarea.tsx">
import { forwardRef, ReactNode, TextareaHTMLAttributes } from 'react'

import { cn } from '@/utils/lib'

import InputIcon from './InputIcon'

interface BaseWidgetProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {
    rows: HTMLTextAreaElement['rows']
    value?: string | number
    isValid?: boolean
    isInvalid?: boolean
}

interface TextareaProps extends BaseWidgetProps {
    iconPrepend?: ReactNode
    iconAppend?: ReactNode
}

const BaseWidget = forwardRef<HTMLTextAreaElement, BaseWidgetProps>(
    ({ value, isValid, isInvalid, className, ...props }, ref) => {
        const baseClasses = 'w-full px-3 py-2 border rounded focus:outline-none focus:ring-2'
        const validClasses = isValid ? 'border-green-500 focus:ring-green-500' : ''
        const invalidClasses = isInvalid ? 'border-red-500 focus:ring-red-500' : ''
        const defaultClasses = !isValid && !isInvalid ? 'border-gray-300 focus:ring-primary' : ''

        return (
            <textarea
                ref={ref}
                defaultValue={value}
                className={cn(baseClasses, validClasses, invalidClasses, defaultClasses, className)}
                {...props}
            />
        )
    }
)

BaseWidget.displayName = 'BaseWidget'

const Textarea = forwardRef<HTMLTextAreaElement, TextareaProps>(
    ({ value, isValid, isInvalid, iconPrepend, iconAppend, ...props }, ref) => {
        if (iconPrepend || iconAppend) {
            return (
                <InputIcon iconPrepend={iconPrepend} iconAppend={iconAppend}>
                    <BaseWidget ref={ref} isValid={isValid} isInvalid={isInvalid} value={value} {...props} />
                </InputIcon>
            )
        }

        return <BaseWidget ref={ref} isValid={isValid} isInvalid={isInvalid} value={value} {...props} />
    }
)

Textarea.displayName = 'Textarea'

export default Textarea
</file>

<file path="src/components/HeroTitle/index.tsx">
import Section from '@/components/Section'
import Title from '@/components/Title'

interface HeroTitleProps {
    title: string
    subtitle?: string
}

export default function HeroTitle({ title, subtitle }: HeroTitleProps) {
    return (
        <Section className="bg-primary text-white flex items-center justify-center" size={'xl'} fluid>
            <Title>{title}</Title>
            {subtitle && <p className="text-lg text-center mt-3">{subtitle}</p>}
        </Section>
    )
}
</file>

<file path="src/components/IconWrapper/index.tsx">
import { ReactNode } from 'react'

interface IconWrapperProps {
    children: ReactNode
}

export default function IconWrapper({ children }: IconWrapperProps) {
    return (
        <div className="relative bg-white border-8 border-gray-100 rounded-full text-sub-primary w-32 h-32 sm:w-40 sm:h-40 mx-auto flex items-center justify-center transition-all duration-300 ease-in-out before:content-[''] before:block before:absolute before:left-0 before:top-0 before:rounded-full before:w-full before:h-full before:border before:border-gray-200 before:transition-colors before:duration-300 hover:bg-sub-primary hover:text-white hover:before:border-sub-primary">
            <div className="[&>svg]:w-[3.5em] [&>svg]:h-[3.5em] sm:[&>svg]:w-[4.5em] sm:[&>svg]:h-[4.5em]">
                {children}
            </div>
        </div>
    )
}
</file>

<file path="src/components/Modal/index.tsx">
'use client'

import { ReactNode, useEffect, useRef } from 'react'

import { XMark } from '@/components/Icons'

interface ModalProps {
    show: boolean
    onHide: () => void
    title?: string
    size?: 'sm' | 'md' | 'lg' | 'xl'
    centered?: boolean
    backdrop?: 'static' | boolean
    children: ReactNode
}

interface ModalHeaderProps {
    closeButton?: boolean
    children: ReactNode
}

interface ModalTitleProps {
    children: ReactNode
}

interface ModalBodyProps {
    children: ReactNode
}

interface ModalFooterProps {
    children: ReactNode
}

export function ModalHeader({ closeButton, children }: ModalHeaderProps) {
    return (
        <div className="flex items-center justify-between p-4 border-b">
            {children}
            {closeButton && (
                <button
                    type="button"
                    className="text-gray-400 hover:text-gray-600 transition-colors"
                    onClick={() => {
                        const event = new CustomEvent('modal-close')
                        window.dispatchEvent(event)
                    }}
                >
                    <XMark className="w-6 h-6" />
                </button>
            )}
        </div>
    )
}

export function ModalTitle({ children }: ModalTitleProps) {
    return <h2 className="text-xl font-bold text-gray-900">{children}</h2>
}

export function ModalBody({ children }: ModalBodyProps) {
    return <div className="p-4 text-gray-900">{children}</div>
}

export function ModalFooter({ children }: ModalFooterProps) {
    return <div className="flex items-center justify-end gap-2 p-4 border-t text-gray-900">{children}</div>
}

export default function Modal({ show, onHide, size = 'md', centered = false, backdrop = true, children }: ModalProps) {
    const modalRef = useRef<HTMLDivElement>(null)

    useEffect(() => {
        const handleClose = () => onHide()
        window.addEventListener('modal-close', handleClose)
        return () => window.removeEventListener('modal-close', handleClose)
    }, [onHide])

    useEffect(() => {
        const handleEscape = (e: KeyboardEvent) => {
            if (e.key === 'Escape' && backdrop !== 'static') {
                onHide()
            }
        }

        if (show) {
            document.addEventListener('keydown', handleEscape)
            document.body.style.overflow = 'hidden'
        }

        return () => {
            document.removeEventListener('keydown', handleEscape)
            document.body.style.overflow = 'unset'
        }
    }, [show, onHide, backdrop])

    const handleBackdropClick = (e: React.MouseEvent) => {
        if (backdrop !== 'static' && e.target === modalRef.current) {
            onHide()
        }
    }

    if (!show) return null

    const sizeClasses = {
        sm: 'max-w-sm',
        md: 'max-w-md',
        lg: 'max-w-lg',
        xl: 'max-w-xl',
    }

    return (
        <div
            ref={modalRef}
            className={`fixed inset-0 z-50 flex ${centered ? 'items-center' : 'items-start pt-20'} justify-center bg-black bg-opacity-50`}
            onClick={handleBackdropClick}
        >
            <div
                className={`bg-white rounded-lg shadow-xl w-full ${sizeClasses[size]} mx-4 max-h-[90vh] overflow-y-auto`}
            >
                {children}
            </div>
        </div>
    )
}

Modal.Header = ModalHeader
Modal.Title = ModalTitle
Modal.Body = ModalBody
Modal.Footer = ModalFooter
</file>

<file path="src/components/SectionHeader/index.tsx">
interface SectionHeaderProps {
    title: string
    subtitle?: string
}

export default function SectionHeader({ title, subtitle }: SectionHeaderProps) {
    return (
        <div className="mt-4 mb-5 text-center">
            <h2 className="text-4xl mb-3">{title}</h2>
            {subtitle && <p className="text-gray-600">{subtitle}</p>}
        </div>
    )
}
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
}
</file>

<file path="src/app/conditions-generales-de-vente/page.tsx">
import { Metadata } from 'next'

import Hero from '@/components/HeroTitle'
import { Download } from '@/components/Icons'
import Section from '@/components/Section'

export const metadata: Metadata = {
    title: `Conditions Générales de Vente - SILARHI`,
}

export default function Page() {
    return (
        <>
            <Hero title="Conditions générales de vente" />
            <Section>
                <p>
                    <em className="text-gray-600 inline-block mr-2">Mis à jour le 29/03/2019</em>
                    <a
                        href="/pdf/CGV.pdf"
                        className="inline-block px-3 py-1.5 text-sm bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors"
                        download
                    >
                        <Download className="mr-1 inline" />
                        Télécharger au format PDF
                    </a>
                </p>
                <h2>Article 1 : Les parties</h2>
                <p>
                    Le terme « Client » désigne toute personne morale ou physique, ayant requis les compétences du
                    Prestataire pour toute prestation de services ou produit proposé audit Client.
                </p>
                <p>
                    Le terme « Prestataire » désigne la société SILARHI, SASU au capital de 1 000 €, 116 Route d{"'"}
                    Espagne – BAT 113 BAL 411, 31100 Toulouse, immatriculée au RCS de TOULOUSE sous le numéro 841541667
                    et représentée par Guillaume Sainthillier en sa qualité de Gérant.
                </p>
                <h2>Article 2 : L{"'"}objet du contrat</h2>
                <p>Le contrat établi les relations commerciales entre le Prestataire et le Client.</p>
                <h2>Article 3 : Généralités et acceptation du contrat</h2>
                <p>
                    Le Prestataire se réserve le droit de modifier les présentes conditions générales de vente et l{"'"}
                    ensemble des formules et tarifs qu{"'"}il propose à tout moment et ce, sans préavis. Toute
                    modification effectuée n{"'"}affectera pas les devis ou bons de commande dont les dates sont
                    antérieures à la date de modification des conditions générales de vente. Dans le cas où le Client
                    est un particulier, il reconnaît être majeur conformément aux lois du pays dans lequel il réside. En
                    acceptant un devis ou un bon de commande édité par le Prestataire, le Client reconnaît avoir pris
                    connaissance et accepté les présentes conditions générales de vente.
                </p>
                <h2>Article 4 : Traitement et envoi des fichiers par le client</h2>
                <p>
                    Le client s{"'"}engage à faire parvenir au prestataire l{"'"}ensemble des fichiers client (textes,
                    polices et images, même issus de tiers, en libres de droits, structure et / ou modèle de données,
                    brief, cahier des charges) avant le début de la prestation. Les textes sont à fournir sous format
                    électronique et typographié sans fautes d{"'"}orthographe ; aucune saisie de texte ne sera réalisée.
                    Le Prestataire ne peut en aucun cas être tenu pour responsable des fautes d{"'"}orthographe
                    présentes dans les textes fournis par le Client. Toutefois, le Client peut confier la rédaction de
                    ses contenus au Prestataire si nécessaire (prestation faisant l{"'"}objet d{"'"}un devis à part).
                    Les polices de caractères sont à insérer dans les envois (en cas de polices non libres de droit, le
                    coût de la licence sera facturée en sus). Les images sont à fournir dans une taille et une
                    résolution suffisantes. La qualité des images fournies par le client et leur rendu sont indépendants
                    de la création de la maquette.
                </p>
                <h2>Article 5 : Modification de la demande initiale par le client</h2>
                <p>
                    Toute nouvelle prestation non comprise dans le devis initial fera l{"'"}objet d{"'"}un nouveau
                    devis. Si la durée d{"'"}une prestation dépassait de manière significative la durée prévue dans le
                    devis initial du fait de demandes émanant du client, de données non fournies avant l{"'"}
                    établissement du devis, une facturation journalière, sur la base tarifaire journalière du devis sera
                    établie. Les modifications significatives, reprises de développement, retard dans la prise de
                    décision ou livraison tardive de documents par le client et nécessaires à la prestation, repoussent
                    d{"'"}autant le délai de livraison établi entre les parties.
                </p>
                <h2>Article 6 : Cession des droits</h2>
                <p>
                    La cession des droits d{"'"}utilisation et de modification des développements réalisés par le
                    prestataire s{"'"}effectue à complet encaissement des montants facturés sauf dispositions contraires
                    mentionnées sur le devis et/ou la facture. Cette cession sera détaillée et précisée au cas par cas
                    sur chaque devis et/ou facture en fonction de ce qui aura été défini par les deux parties. Sauf
                    mention contraire précisée sur chaque devis et/ou facture, le règlement complet de la facture
                    entraîne la cession des droits d{"'"}utilisation, de modification et de diffusion du développement
                    pour le Client.
                </p>
                <h2>Article 7 : Confidentialité</h2>
                <p>
                    Au titre de la confidentialité et ce, avant et pendant toute la durée du projet, le Prestataire s
                    {"'"}engage à garder confidentiel toutes informations et/ou documents de quelque nature que ce soit
                    concernant le Client et son projet.
                </p>
                <h2>Article 8 : Conditions de règlement</h2>
                <p>
                    Sauf mentions contraires dans le devis et/ou la facture, un acompte de 30% minimum du montant TTC
                    total sera demandé à la commande. Les prestations doivent être réglées au Prestataire aux dates
                    mentionnées sur le devis et/ou la facture client. Le client s{"'"}engage à respecter les dates de
                    paiement mentionnées sur son devis et/ou sa facture et à retourner sa facture datée et signée avec
                    la mention « Lu et approuvé » ; cette disposition est aussi un élément essentiel du contrat.
                </p>
                <h2>Article 9 : Recouvrement des créances</h2>
                <p>
                    En cas de non paiement, l{"'"}ensemble des frais de recouvrement seront à la charge du client. Si
                    nécessaire, le Prestataire pourra faire appel aux services d{"'"}une société d{"'"}affacturage pour
                    le recouvrement de ses créances clients.
                </p>
                <h2>Article 10 : La force majeure</h2>
                <p>
                    Les parties ne peuvent être considérées comme responsables ou ayant faillis à leurs obligations
                    contractuelles, lorsque le défaut d{"'"}exécution des obligations respectives a pour origine la
                    force majeure ; le contrat entre les parties est suspendu jusqu{"'"}à l{"'"}extinction des causes
                    ayant engendrées la force majeure. La force majeure prend en compte des faits ou circonstances
                    irrésistibles, extérieurs aux parties, imprévisibles et indépendants de la volonté des parties,
                    malgré tous les efforts raisonnablement possibles pour les empêcher. Sont aussi considérés comme cas
                    de force majeure, le blocage des moyens de transports ou d{"'"}approvisionnements, tremblements de
                    terre, incendies, tempêtes, inondations, foudre, l{"'"}arrêt des réseaux de télécommunication, et
                    notamment tous les réseaux accessibles par internet, ou difficultés propres aux réseaux de
                    télécommunication extérieurs aux parties. La partie touchée par la force majeure en avisera l{"'"}
                    autre dans les cinq (5) jours ouvrables suivant la date à laquelle elle en aura eu connaissance. Les
                    deux parties conviendront alors des conditions dans lesquelles l{"'"}exécution du contrat sera
                    poursuivie.
                </p>
                <h2>Article 11 : Promotion des créations</h2>
                <p>
                    Sauf dispositions contraires écrites, le prestataire pourra diffuser toutes créations réalisées,
                    soit pour le client, soit pour un tiers pour lequel intervient le client, à des fins de «
                    présentation de créations » sur tous types de supports sans limitation de durée.
                </p>
                <h2>Article 12 : Les conditions générales de vente</h2>
                <p>
                    Le prestataire peut modifier, ajouter ou retrancher des dispositions à ces conditions générales de
                    vente sans préavis et sans avoir à en aviser ses clients ou des tiers préalablement.
                </p>
                <h2>Article 13 : Règlement des litiges</h2>
                <p>
                    Le contrat est soumis au droit Français. En cas de litiges, les parties s{"'"}engagent à tout faire
                    pour régler leurs différents à l{"'"}amiable. Au cas où une résolution amiable ne pourrait aboutir,
                    la juridiction compétente est celle de TOULOUSE.
                </p>
            </Section>
        </>
    )
}
</file>

<file path="src/app/projets/tag/[tag]/page.tsx">
import { Metadata } from 'next'
import Link from 'next/link'
import { notFound } from 'next/navigation'

import HeroTitle from '@/components/HeroTitle'
import ProjectCard from '@/components/ProjectCard'
import Section from '@/components/Section'
import SectionHeader from '@/components/SectionHeader'
import { getAllProjectTags, getProjectsByTag } from '@/utils/project'
import { getTagBySlug } from '@/utils/tags'

interface TagPageProps {
    params: Promise<{
        tag: string
    }>
}

export async function generateStaticParams() {
    const tags = await getAllProjectTags()
    return tags.map((tag) => ({
        tag: tag.slug,
    }))
}

export async function generateMetadata({ params }: TagPageProps): Promise<Metadata> {
    const { tag: tagParam } = await params
    const tag = await getTagBySlug(decodeURIComponent(tagParam))

    return {
        title: `Projets Web ${tag.name} - SILARHI`,
        description: `Découvrez tous nos projets Web sur le thème "${tag.name}".`,
    }
}

export default async function TagPage({ params }: TagPageProps) {
    const { tag: tagParam } = await params
    const tag = await getTagBySlug(decodeURIComponent(tagParam))
    const projects = await getProjectsByTag(tag.slug)
    const allTags = await getAllProjectTags()

    if (projects.length === 0) {
        notFound()
    }

    return (
        <>
            <HeroTitle title={`Projet ${tag.name}`} subtitle={`Tous nos projets sur le thème ${tag.name}`} />

            <Section>
                {tag.description && (
                    <div className="flex justify-center mb-5">
                        <div className="w-full lg:w-2/3">
                            <div
                                className="bg-blue-50 border-0 px-4 py-3 rounded"
                                style={{ backgroundColor: tag.color ? `${tag.color}15` : undefined }}
                            >
                                <p className="mb-0 text-center">{tag.description}</p>
                            </div>
                        </div>
                    </div>
                )}
                <SectionHeader
                    title={`${projects.length} projet${projects.length > 1 ? 's' : ''} trouvé${projects.length > 1 ? 's' : ''}`}
                />

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {projects.map((project) => (
                        <div key={project.slug}>
                            <ProjectCard project={project} />
                        </div>
                    ))}
                </div>

                <div className="mt-4">
                    <h3 className="text-sm font-medium mb-3">Nos autres thèmes de projet</h3>
                    <div className="flex flex-wrap gap-2">
                        <Link
                            href="/projets"
                            className="px-4 py-2 border border-gray-400 text-gray-600 rounded text-sm hover:bg-gray-100 transition-colors"
                        >
                            Tous les projets
                        </Link>
                        {allTags
                            .filter((t) => t.slug !== tag.slug)
                            .map((otherTag) => (
                                <Link
                                    key={otherTag.slug}
                                    href={`/projets/tag/${otherTag.slug}`}
                                    className="px-4 py-2 border border-primary text-primary rounded text-sm hover:bg-primary hover:text-white transition-colors"
                                >
                                    {otherTag.name}
                                </Link>
                            ))}
                    </div>
                </div>
            </Section>
        </>
    )
}
</file>

<file path="src/app/globals.css">
@import "tailwindcss";

@theme {
  --color-primary: #2556cf;
  --color-primary-light: #5585fb;
  --color-primary-dark: #172e59;
  --color-sub-primary: #ffaf30;
  
  --font-family-body: var(--body-font), sans-serif;
  
  --breakpoint-sm: 540px;
  --breakpoint-md: 720px;
  --breakpoint-lg: 960px;
  --breakpoint-xl: 1140px;
  --breakpoint-2xl: 1320px;
}

html {
    scroll-behavior: smooth;
}

html,
body {
    height: 100%;
}

body {
    background-color: #f8f9fa;
}
</file>

<file path="src/app/page.tsx">
'use client'
import Head from 'next/head'
import Image from 'next/image'
import { Fragment, ReactNode, useCallback, useState } from 'react'
import ReactMarkdown from 'react-markdown'

import Button from '@/components/Button'
import CallToAction from '@/components/CallToAction'
import ContactForm from '@/components/ContactForm'
import {
    Check,
    Clock,
    CloudBolt,
    Code,
    Enveloppe,
    FileContract,
    LightBulb,
    Map,
    Phone,
    XMark,
} from '@/components/Icons'
import IconWrapper from '@/components/IconWrapper'
import Section from '@/components/Section'
import SectionHeader from '@/components/SectionHeader'
import useForceReducer from '@/hooks/reducer'
import { chunk } from '@/utils/array'
import { getDaysSince } from '@/utils/dates'
import { getTotalEmployeeCoffees, getTotalEmployeeHours } from '@/utils/employees'

import home from '../../public/images/home.jpg'
import { lato } from './fonts'

interface Feature {
    icon: () => ReactNode
    title: string
    description: string
}

interface Service {
    text: string
    supported: boolean
}

interface Employee {
    name: string
    from: Date
    to?: Date
    coffeesPerDay: number
    hoursPerDay: number
}

interface NumberData {
    value: number
    unit: string
    text: string
}

const FEATURES: Feature[] = [
    {
        icon: () => <FileContract />,
        title: 'Analyse',
        description:
            "On vous aide à spécifier votre projet si vous en avez besoin. On peut également vous guider dans l'étude de la faisabilité technique.",
    },
    {
        icon: () => <LightBulb />,
        title: 'Conception',
        description: 'On vous présente la façon de mener à bien votre projet !',
    },
    {
        icon: () => <Code />,
        title: 'Développement',
        description:
            'On donne vie à votre idée. Vous intervenez à chaque étape majeure du développement pour confirmer la trajectoire du projet.',
    },
    {
        icon: () => <CloudBolt />,
        title: 'Déploiement',
        description:
            "L'application est hébergée sur l'infrastructure de votre choix. Intranet, OVH, AWS, GCP, on s'adapte, et si tous ces sigles ne vous disent rien, laissez-vous guider !",
    },
]

const SERVICES: Service[] = [
    {
        text: `**Développement d'applications Web** type gestion, CRM, ERP, ...`,
        supported: true,
    },
    {
        text: `**Développement d'applications mobiles** / responsives`,
        supported: true,
    },
    {
        text: `Développement spécifique d'API`,
        supported: true,
    },
    {
        text: `Pont de communication entre applications existantes`,
        supported: true,
    },
    {
        text: `Développement de site e-Commerce`,
        supported: false,
    },
    {
        text: `Développement de plugin type Wordpress, Drupal`,
        supported: false,
    },
    {
        text: `Upgrade de version Symfony`,
        supported: true,
    },
    {
        text: `Migration de version PHP`,
        supported: true,
    },
    {
        text: `Reprise d'application PHP existante`,
        supported: true,
    },
    {
        text: `Gestion de l'infrastructure serveur / cloud`,
        supported: true,
    },
    {
        text: `Mise en place d'intégration continue / déploiement continu`,
        supported: true,
    },
    {
        text: `Intégration de maquette`,
        supported: true,
    },
    {
        text: `Audit de sécurité`,
        supported: true,
    },
    {
        text: `Audit SEO`,
        supported: false,
    },
    {
        text: `Webmarketing`,
        supported: false,
    },
    {
        text: `Hébergement de sites Internet`,
        supported: false,
    },
    {
        text: `Création de logos / identité visuelle (en revanche, nous pouvons vous recommander des graphistes)`,
        supported: false,
    },
]

const COMPANY_START_DATE = new Date('2018-08-01')
const DAYS_SINCE_COMPANY_START_DATE = getDaysSince(COMPANY_START_DATE)

const EMPLOYEES: Employee[] = [
    {
        name: 'Guillaume',
        from: new Date(COMPANY_START_DATE),
        coffeesPerDay: 3,
        hoursPerDay: 9,
    },
    {
        name: 'Florian',
        from: new Date('2020-09-01'),
        to: new Date('2023-09-15'),
        coffeesPerDay: 0,
        hoursPerDay: 7,
    },
    {
        name: 'Rémy',
        from: new Date('2022-01-01'),
        to: new Date('2024-03-15'),
        coffeesPerDay: 4,
        hoursPerDay: 8,
    },
    {
        name: 'Maxime',
        from: new Date('2022-11-02'),
        to: new Date('2024-04-01'),
        coffeesPerDay: 3,
        hoursPerDay: 8,
    },
]

const NB_CLIENTS = 11
const NB_PROJECTS = 109

const NUMBERS: NumberData[] = [
    {
        value: getTotalEmployeeHours(EMPLOYEES),
        unit: 'Heures',
        text: `passées à travailler sur les projets de nos clients.`,
    },
    {
        value: NB_CLIENTS,
        unit: 'Clients',
        text: `Et 100% de satisfaction au cours de ces ${Math.trunc(
            DAYS_SINCE_COMPANY_START_DATE / 365
        )} années. Venez vérifier par vous-même !`,
    },
    {
        value: NB_PROJECTS,
        unit: 'Projets',
        text: `Plus de ${Math.trunc(
            NB_PROJECTS / NB_CLIENTS
        )} projets par client en moyenne, signe de la relation de confiance établie.`,
    },
    {
        value: getTotalEmployeeCoffees(EMPLOYEES),
        unit: 'Cafés',
        text: `Être toujours à votre écoute et force de proposition, telle est notre mission !`,
    },
]

export default function Page() {
    const { value: formIdValue, updateValue: forceIsFormSubmitted, resetValue: resetFormSubmitted } = useForceReducer()
    const [showSendButton, setShowSendButton] = useState<boolean>(true)
    const [isFormPending, setIsFormPending] = useState<boolean>(false)

    const onPending = useCallback(() => {
        setIsFormPending(true)
    }, [setIsFormPending])

    const onFinish = useCallback(() => {
        setShowSendButton(false)
        resetFormSubmitted()
    }, [setShowSendButton, resetFormSubmitted])

    // We store title in variable because of ' special chars which render multiple children
    const title = `Développement d'applications Web & PHP à Toulouse - SILARHI`

    return (
        <>
            <Head>
                <title>{title}</title>
            </Head>
            {/* Header */}
            <div className="relative h-screen w-full overflow-hidden">
                <div className="absolute top-0 left-0 z-[1] w-full h-full opacity-33 bg-black"></div>
                <Image src={home} sizes="100vw" fill style={{ objectFit: 'cover' }} priority alt="" />
                <div className="absolute z-[2] w-full h-full flex flex-col items-center justify-center text-white">
                    <Section>
                        <div style={{ maxWidth: '55em' }} className={'mx-auto'}>
                            <h1 className="text-[clamp(2.5rem,5vw,5rem)] leading-none font-bold">
                                Développement d{"'"}applications Web
                                <span className="mt-3 text-[clamp(1.5rem,3vw,2.5rem)] block uppercase leading-tight">
                                    À Toulouse & en France
                                </span>
                            </h1>
                            <h2 className="uppercase font-light text-3xl">Donnez vie à vos idées</h2>
                            <Button as="a" size="lg" href="#about" className="mt-4">
                                En savoir plus
                            </Button>
                        </div>
                    </Section>
                </div>
            </div>
            {/* About */}
            <Section id={'about'}>
                <SectionHeader title="On développe des applications Web" subtitle="Et ça se passe comme ça." />
                <div className="grid grid-cols-1 lg:grid-cols-4 xl:grid-cols-4 gap-5">
                    {FEATURES.map((feature, key) => (
                        <div key={key} className="w-full">
                            <div className="bg-white shadow rounded-lg mb-4 text-center p-6">
                                <div>
                                    <IconWrapper>{feature.icon()}</IconWrapper>
                                    <h3 className="text-2xl font-bold my-3">{feature.title}</h3>
                                    <p className="text-gray-600">{feature.description}</p>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>
                <CallToAction />
            </Section>
            {/* Services */}
            <Section id={'services'} className={'bg-white'}>
                <SectionHeader
                    title="Nos services"
                    subtitle="Vérifiez que votre besoin colle avec notre savoir faire."
                />
                <h3 className="text-2xl text-primary font-light">Notre savoir faire</h3>
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-5 mb-5">
                    {chunk(
                        SERVICES.filter((service) => service.supported),
                        2
                    ).map((services, chunkKey) => (
                        <div key={chunkKey}>
                            <ul className="space-y-0">
                                {services.map((service, key) => (
                                    <li
                                        key={`${chunkKey}-${key}`}
                                        className="flex items-center py-3 border-b border-gray-200"
                                    >
                                        <div className="mr-4">
                                            <Check className="text-2xl text-sub-primary" />
                                        </div>
                                        <div className="text-gray-600">
                                            <ReactMarkdown
                                                components={{
                                                    p: ({ children }) => <>{children}</>,
                                                }}
                                            >
                                                {service.text}
                                            </ReactMarkdown>
                                        </div>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    ))}
                </div>
                <h3 className="text-2xl text-primary font-light">Ce qu{"'"}on ne fait PAS</h3>
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-5 mb-5">
                    {chunk(
                        SERVICES.filter((service) => !service.supported),
                        2
                    ).map((services, chunkKey) => (
                        <div key={chunkKey}>
                            <ul className="space-y-0">
                                {services.map((service, key) => (
                                    <li
                                        key={`${chunkKey}-${key}`}
                                        className="flex items-center py-3 border-b border-gray-200"
                                    >
                                        <div className="mr-4">
                                            <XMark className="text-2xl text-sub-primary" />
                                        </div>
                                        <div className="text-gray-600">
                                            <ReactMarkdown
                                                components={{
                                                    p: ({ children }) => <>{children}</>,
                                                }}
                                            >
                                                {service.text}
                                            </ReactMarkdown>
                                        </div>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    ))}
                </div>
                <CallToAction />
            </Section>
            {/* Chiffres */}
            <Section id={'chiffres'}>
                <SectionHeader
                    title="Les chiffres"
                    subtitle="Quelques chiffres de cette jeune entreprise fondée en 2018."
                />
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-5">
                    {NUMBERS.map((number, key) => (
                        <div key={key} className="text-center">
                            <div className={`${lato.className} text-sub-primary text-6xl font-bold mb-3`}>
                                {number.value}
                            </div>
                            <h4 className="text-2xl text-primary font-light mb-3">{number.unit}</h4>
                            <hr style={{ width: '40%' }} className="mx-auto" />
                            <p className="text-gray-600">{number.text}</p>
                        </div>
                    ))}
                </div>
                <CallToAction />
            </Section>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-0">
                {/* Contact */}
                <div className="bg-white">
                    <Section id="contact" className="md:pr-3 lg:pr-4 xl:pr-5" paddingX={false} container={false}>
                        <div className="container container-half-md md:mr-0">
                            <h2 className="text-3xl mb-3">Contact</h2>
                            <p className="text-gray-600">
                                Laissez-nous un message et nous vous répondrons dans les plus brefs délais.
                            </p>
                            <ContactForm onFinish={onFinish} onPending={onPending} isSubmitted={formIdValue > 0} />
                            {showSendButton && (
                                <Button
                                    variant="primary"
                                    size="lg"
                                    className="mt-4 w-full"
                                    onClick={() => forceIsFormSubmitted()}
                                    disabled={isFormPending}
                                >
                                    Envoyer
                                </Button>
                            )}
                        </div>
                    </Section>
                </div>
                {/* SILARHI */}
                <div className="bg-[#f4f6fd]">
                    <Section id="silarhi" className="md:pl-3 lg:pl-4 xl:pl-5" paddingX={false} container={false}>
                        <div className="container container-half-md md:ml-0">
                            <h2 className="text-3xl mb-3">SILARHI</h2>
                            <p className="text-gray-600">Les infos pratiques, c{"'"}est ici.</p>
                            <ul className="space-y-0">
                                <li className="flex flex-nowrap py-3 border-b border-gray-200">
                                    <span className="mr-1 md:mr-2 lg:mr-3 text-primary">
                                        <Map />
                                    </span>
                                    <span className="text-gray-600">
                                        116 Route d{"'"}Espagne
                                        <br />
                                        HELIOPOLIS 4<br />
                                        BAT 113
                                        <br />
                                        31100 Toulouse
                                    </span>
                                </li>
                                <li className="flex flex-nowrap py-3 border-b border-gray-200">
                                    <span className="mr-1 md:mr-2 lg:mr-3 text-primary">
                                        <Clock />
                                    </span>
                                    <span className="text-gray-600">
                                        Du lundi au vendredi
                                        <br />
                                        De 9h à 18h
                                    </span>
                                </li>
                                <li className="flex flex-nowrap py-3 border-b border-gray-200">
                                    <span className="mr-1 md:mr-2 lg:mr-3 text-primary">
                                        <Phone />
                                    </span>
                                    <span className="text-gray-600">
                                        <a href="tel:+33607275826">0 607.275.826</a>
                                    </span>
                                </li>
                                <li className="flex flex-nowrap py-3 border-b border-gray-200">
                                    <span className="mr-1 md:mr-2 lg:mr-3 text-primary">
                                        <Enveloppe />
                                    </span>
                                    <span className="text-gray-600">
                                        <a href="mailto:%68ell%6F@si%6Ca%72hi.fr">hello@silarhi.fr</a>
                                    </span>
                                </li>
                            </ul>
                        </div>
                    </Section>
                </div>
            </div>
        </>
    )
}
</file>

<file path="src/components/Section/index.tsx">
'use client'

import { cn } from '@/utils/lib'

interface SectionProps extends React.HTMLAttributes<HTMLDivElement> {
    container?: boolean
    fluid?: boolean
    size?: 'default' | 'xl'
    paddingX?: boolean
    paddingY?: boolean
}

export default function Section({
    container = true,
    fluid = false,
    size = 'default',
    children,
    className,
    paddingX = true,
    paddingY = true,
    ...props
}: SectionProps) {
    const containerClass = fluid ? 'w-full px-4' : 'container mx-auto px-4'

    const sectionClasses = cn(
        className,
        paddingX && 'px-4 lg:px-8 xl:px-16',
        paddingY && 'py-4 lg:py-8 xl:py-16',
        size === 'xl' && 'h-screen sm:h-[75vh] md:h-[56.25vh] lg:h-[42.86vh]'
    )

    return (
        <section className={sectionClasses} {...props}>
            <>
                {container && <div className={cn(containerClass, { 'px-0': paddingX })}>{children}</div>}
                {!container && children}
            </>
        </section>
    )
}
</file>

<file path="src/app/projets/[slug]/page.tsx">
import { Metadata } from 'next'
import Link, { LinkProps } from 'next/link'
import { notFound } from 'next/navigation'
import { MDXRemote } from 'next-mdx-remote/rsc'
import React from 'react'
import rehypeAutolinkHeadings from 'rehype-autolink-headings'
import rehypeSlug from 'rehype-slug'
import rehypeUnwrapImages from 'rehype-unwrap-images'
import remarkGfm from 'remark-gfm'

import HeroTitle from '@/components/HeroTitle'
import { Calendar, Clock, User } from '@/components/Icons'
import { MDXImage } from '@/components/MDXImage'
import Section from '@/components/Section'
import { getAllProjectSlugs, getProjectBySlug } from '@/utils/project'

interface ProjectProjectPageProps {
    params: Promise<{
        slug: string
    }>
}

// MDX Components with optimized images
const mdxComponents = {
    h1: (props: React.HTMLAttributes<HTMLHeadingElement>) => <h1 className="mb-4" {...props} />,
    h2: (props: React.HTMLAttributes<HTMLHeadingElement>) => <h2 className="mt-5 mb-3" {...props} />,
    h3: (props: React.HTMLAttributes<HTMLHeadingElement>) => <h3 className="mt-4 mb-3" {...props} />,
    blockquote: (props: React.HTMLAttributes<HTMLElement>) => (
        <blockquote className="border-l-4 border-primary pl-3 my-4 italic" {...props} />
    ),
    code: (props: React.HTMLAttributes<HTMLElement>) => <code className="bg-gray-100 px-1 rounded" {...props} />,
    pre: (props: React.HTMLAttributes<HTMLPreElement>) => (
        <pre className="bg-gray-900 text-white p-3 rounded overflow-auto my-3" {...props} />
    ),
    a: CustomLink,
    img: MDXImage,
    Image: MDXImage,
}

function CustomLink({ href, ...props }: LinkProps & React.AnchorHTMLAttributes<HTMLAnchorElement>) {
    if (href.startsWith('/')) {
        return <Link href={href} {...props} />
    }

    if (href.startsWith('#')) {
        return <a {...props} />
    }

    return <a target="_blank" rel="noopener noreferrer" {...props} />
}

export async function generateStaticParams() {
    const slugs = getAllProjectSlugs()
    return slugs.map((slug) => ({
        slug,
    }))
}

export async function generateMetadata({ params }: ProjectProjectPageProps): Promise<Metadata> {
    const { slug } = await params
    const project = await getProjectBySlug(slug)

    if (!project) {
        return {
            title: 'Projet non trouvé - SILARHI',
        }
    }

    return {
        title: `${project.title} - SILARHI`,
        description: project.excerpt ?? `Projet web réalisé par SILARHI`,
    }
}

export default async function ProjectProjectPage({ params }: ProjectProjectPageProps) {
    const { slug } = await params
    const project = await getProjectBySlug(slug)

    if (!project) {
        notFound()
    }

    return (
        <>
            <HeroTitle title={project.title} subtitle={project.excerpt} />
            <Section>
                <div className="flex justify-center">
                    <div className="w-full lg:w-5/6">
                        <div className="mb-4">
                            <div className="flex items-center text-gray-600 mb-3">
                                <span className="mr-3">
                                    <User className="mr-1 inline" />
                                    {project.author}
                                </span>
                                <span className="mr-3">
                                    <Clock className="mr-1 inline" />
                                    {project.readingTime}
                                </span>
                                <time dateTime={project.date}>
                                    <Calendar className="mr-1 inline" />
                                    {new Date(project.date).toLocaleDateString('fr-FR', {
                                        year: 'numeric',
                                        month: 'long',
                                        day: 'numeric',
                                    })}
                                    {project.updateDate && (
                                        <span className="text-gray-600 ml-2">
                                            (mis à jour le{' '}
                                            {new Date(project.updateDate).toLocaleDateString('fr-FR', {
                                                year: 'numeric',
                                                month: 'long',
                                                day: 'numeric',
                                            })}
                                            )
                                        </span>
                                    )}
                                </time>
                            </div>

                            {project.tags.length > 0 && (
                                <div className="mb-3">
                                    {project.tags.map((tag) => (
                                        <Link
                                            key={tag.slug}
                                            href={`/projets/tag/${tag.slug}`}
                                            className="inline-block bg-primary text-white px-2 py-1 rounded mr-1 no-underline text-xs"
                                        >
                                            {tag.name}
                                        </Link>
                                    ))}
                                </div>
                            )}
                        </div>

                        <article className="prose max-w-none">
                            <MDXRemote
                                source={project.content}
                                components={mdxComponents}
                                options={{
                                    mdxOptions: {
                                        remarkPlugins: [remarkGfm],
                                        rehypePlugins: [rehypeSlug, rehypeAutolinkHeadings, rehypeUnwrapImages],
                                    },
                                }}
                            />
                        </article>

                        <div className="mt-5 pt-4 border-t">
                            <Link
                                href="/projets"
                                className="inline-block px-4 py-2 border border-primary text-primary rounded hover:bg-primary hover:text-white transition-colors"
                            >
                                ← Retour aux projets
                            </Link>
                        </div>
                    </div>
                </div>
            </Section>
        </>
    )
}
</file>

<file path="src/components/ProjectCard/index.tsx">
import Link from 'next/link'

import { Calendar, Clock, User } from '@/components/Icons'
import { ProjectProject } from '@/utils/project'

interface ProjectCardProps {
    project: ProjectProject
}

export default function ProjectCard({ project }: ProjectCardProps) {
    return (
        <article className="bg-white h-full shadow-sm rounded-lg border-0 overflow-hidden">
            <div className="p-6 flex flex-col h-full">
                <div className="mb-3">
                    <h3 className="text-xl font-medium">
                        <Link
                            href={`/projets/${project.slug}`}
                            className="no-underline text-gray-900 hover:text-primary"
                        >
                            {project.title}
                        </Link>
                    </h3>

                    {project.excerpt && <p className="text-gray-600">{project.excerpt}</p>}
                </div>

                <div className="mt-auto text-sm">
                    {project.tags.length > 0 && (
                        <div className="mb-2">
                            {project.tags.map((tag) => (
                                <Link
                                    key={tag.slug}
                                    href={`/projets/tag/${tag.slug.toLowerCase()}`}
                                    className="inline-block bg-primary text-white px-2 py-1 rounded mr-1 no-underline text-xs"
                                >
                                    {tag.name}
                                </Link>
                            ))}
                        </div>
                    )}
                    <div className="flex flex-wrap items-center text-gray-600">
                        <span className="mr-3">
                            <User className="mr-1 inline" />
                            {project.author}
                        </span>
                        <span className="mr-3">
                            <Clock className="mr-1 inline" />
                            {project.readingTime}
                        </span>
                        <time dateTime={project.date}>
                            <Calendar className="mr-1 inline" />
                            {new Date(project.date).toLocaleDateString('fr-FR', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                            })}
                        </time>
                    </div>
                </div>
            </div>
        </article>
    )
}
</file>

<file path="styles/app.scss">
@import "core";

//Bootstrap
@import "~bootstrap/scss/bootstrap";

//Components
@import "components/button";
@import "components/card";
@import "components/containers";
@import "components/navbar";
@import "components/input-icon";
@import "components/list-group";
@import "components/offcanvas";

//Layouts
html, body {
  height: 100%;
}

body{
  background-color: #F8F9FA;
}
</file>

<file path="src/components/Navbar/index.tsx">
'use client'

import Image from 'next/image'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { CSSProperties, useEffect, useRef, useState } from 'react'

import ActiveLink from '@/components/ActiveLink'
import CallToActionButton from '@/components/CallToActionButton'
import { cn } from '@/utils/lib'

import logo from '../../../public/images/logo-4096.png'

interface MenuItem {
    path: string
    indexPath?: string
    label: string
    target?: string
}

interface NavbarProps {
    initialClass?: string
    floatingClass?: string
}

export default function Navbar({
    initialClass = 'text-white',
    floatingClass = 'text-white bg-primary-dark',
}: NavbarProps) {
    const ref = useRef<HTMLElement>(null)
    const [floating, setFloating] = useState<boolean>(false)
    const [floatingStyle, setFloatingStyle] = useState<CSSProperties>({})
    const [navbarHeight, setNavbarHeight] = useState<number>(56)
    const [mobileMenuOpen, setMobileMenuOpen] = useState<boolean>(false)

    const pathname = usePathname()

    useEffect(() => {
        if (ref.current) {
            setNavbarHeight(ref.current.clientHeight)
        }
    }, [])

    useEffect(() => {
        const onScroll = () => {
            setFloating(window.scrollY > navbarHeight)
            if (window.scrollY > navbarHeight && window.scrollY <= 2 * navbarHeight) {
                setFloatingStyle({
                    top: Math.round(window.scrollY - 2 * navbarHeight),
                    opacity: 1 - (2 * navbarHeight - window.scrollY) / navbarHeight,
                })
            } else {
                setFloatingStyle({})
            }
        }

        onScroll()
        window.addEventListener('scroll', onScroll, { passive: true })

        return () => {
            window.removeEventListener('scroll', onScroll)
        }
    }, [navbarHeight, setFloating, setFloatingStyle])

    const menuItems: MenuItem[] = [
        {
            path: '/#about',
            indexPath: '#about',
            label: 'À propos',
        },
        {
            path: '/#services',
            indexPath: '#services',
            label: 'Services',
        },
        {
            path: '/#chiffres',
            indexPath: '#chiffres',
            label: 'Chiffres',
        },
        {
            path: '/projets',
            label: 'Projets',
        },
        {
            path: 'https://blog.silarhi.fr',
            label: 'Blog',
            target: '_blank',
        },
    ]

    const isMainPage = pathname === '/' || pathname.startsWith('/#')

    return (
        <>
            <nav
                id="app-navbar"
                className={cn(
                    'absolute top-0 left-0 right-0 z-50 transition-all duration-300',
                    floating && 'fixed opacity-100 [&_img]:max-h-10 [&_img]:w-auto',
                    floating ? floatingClass : initialClass
                )}
                style={floatingStyle}
                ref={ref}
            >
                <div className="container mx-auto px-4">
                    <div className="flex items-center justify-between py-3">
                        <Link
                            href="/"
                            className="flex items-center space-x-2 text-inherit hover:text-sub-primary transition-colors"
                        >
                            <Image src={logo} alt="SILARHI" height={60} className="h-14 w-auto" />
                            <span className="text-xl">SILARHI</span>
                        </Link>

                        {/* Mobile menu button */}
                        <button
                            className="lg:hidden p-2 text-inherit"
                            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
                            aria-label="Toggle menu"
                        >
                            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d={mobileMenuOpen ? 'M6 18L18 6M6 6l12 12' : 'M4 6h16M4 12h16M4 18h16'}
                                />
                            </svg>
                        </button>

                        {/* Desktop menu */}
                        <ul className="hidden lg:flex items-center space-x-6">
                            {menuItems.map((item, i) => (
                                <li key={i}>
                                    {!isMainPage && (
                                        <ActiveLink
                                            href={item.path}
                                            className="text-inherit hover:text-sub-primary transition-colors"
                                            activeClassName="text-sub-primary"
                                            target={item.target}
                                        >
                                            {item.label}
                                        </ActiveLink>
                                    )}
                                    {isMainPage && (
                                        <ActiveLink
                                            href={item.indexPath ?? item.path}
                                            className="text-inherit hover:text-sub-primary transition-colors"
                                            target={item.target}
                                            activeClassName="text-sub-primary"
                                        >
                                            {item.label}
                                        </ActiveLink>
                                    )}
                                </li>
                            ))}
                            <li className="ml-4">
                                <CallToActionButton variant="sub-primary">Contact</CallToActionButton>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>

            {/* Mobile menu */}
            {mobileMenuOpen && (
                <div className="fixed inset-0 z-40 lg:hidden">
                    <div className="fixed inset-0 bg-black bg-opacity-50" onClick={() => setMobileMenuOpen(false)} />
                    <div className="fixed left-0 top-0 bottom-0 w-80 bg-white shadow-xl overflow-y-auto">
                        <div className="p-4">
                            <div className="flex items-center justify-between mb-6">
                                <div className="flex items-center space-x-2 text-gray-900">
                                    <Image src={logo} alt="SILARHI" height={60} className="h-12 w-auto" />
                                    <span className="font-bold text-2xl">SILARHI</span>
                                </div>
                                <button
                                    className="p-2 text-gray-600 hover:text-gray-900"
                                    onClick={() => setMobileMenuOpen(false)}
                                >
                                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            strokeWidth={2}
                                            d="M6 18L18 6M6 6l12 12"
                                        />
                                    </svg>
                                </button>
                            </div>
                            <ul className="space-y-1">
                                {menuItems.map((item, i) => (
                                    <li key={i}>
                                        {!isMainPage && (
                                            <ActiveLink
                                                href={item.path}
                                                className="block px-4 py-3 text-gray-700 hover:bg-gray-100 rounded transition-colors"
                                                activeClassName="bg-primary-light text-white"
                                                target={item.target}
                                                onClick={() => setMobileMenuOpen(false)}
                                            >
                                                {item.label}
                                            </ActiveLink>
                                        )}
                                        {isMainPage && (
                                            <ActiveLink
                                                href={item.indexPath ?? item.path}
                                                className="block px-4 py-3 text-gray-700 hover:bg-gray-100 rounded transition-colors"
                                                target={item.target}
                                                activeClassName="bg-primary-light text-white"
                                                onClick={() => setMobileMenuOpen(false)}
                                            >
                                                {item.label}
                                            </ActiveLink>
                                        )}
                                    </li>
                                ))}
                                <li className="pt-4 border-t border-gray-200">
                                    <CallToActionButton variant="sub-primary" className="w-full">
                                        Contact
                                    </CallToActionButton>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            )}
        </>
    )
}
</file>

<file path="styles/_variables.scss">
$enable-rfs: true;

$body-bg: white;

//Colors
$primary: #2556cf;
$primary-light: #5585fb;
$primary-dark: #172e59;
$sub-primary: #ffaf30;

//Buttons
$btn-padding-x: 1.25rem;

$btn-padding-y-lg: 0.75rem;
$btn-padding-x-lg: 1.5rem;

//Lists
$list-group-bg: transparent;

//Forms
$input-padding-y: 0.5rem;
$input-border-radius: 0;

//Navbar
$navbar-nav-link-padding-x: 1rem;
$navbar-dark-color: white;
$navbar-dark-hover-color: $sub-primary;
$navbar-dark-brand-color: white;
$navbar-dark-brand-hover-color: $sub-primary;
$navbar-nav-link-padding-x: 1.25rem;

//Shadow
$input-icon-color: $primary;

//Misc
$border-radius: 0.25rem;
$border-radius-lg: 0.375rem;

$link-color: $sub-primary;
$link-decoration: none;
$link-hover-decoration: underline;

//Headings
$headings-font-family: var(--body-font);

//Theme colors
@import "~bootstrap/scss/functions";
@import "~bootstrap/scss/variables";

$theme-colors: (
        "primary": $primary,
        "primary-dark": $primary-dark,
        "sub-primary": $sub-primary,
        "secondary": $secondary,
        "success": $success,
        "info": $info,
        "warning": $warning,
        "danger": $danger,
        "light": $light,
        "dark": $dark
);
</file>

<file path="package.json">
{
  "name": "silarhi.fr",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^7.0.0",
    "@fortawesome/free-solid-svg-icons": "^7.0.0",
    "@fortawesome/react-fontawesome": "^0.2.3",
    "axios": "^1.12.0",
    "clsx": "^2.1.1",
    "gray-matter": "^4.0.3",
    "next": "15.4.7",
    "next-mdx-remote": "^5.0.0",
    "prop-types": "^15.8.1",
    "react": "19.1.1",
    "react-dom": "19.1.1",
    "react-hook-form": "^7.62.0",
    "react-markdown": "^10.1.0",
    "reading-time": "^1.5.0",
    "rehype-autolink-headings": "^7.1.0",
    "rehype-slug": "^6.0.0",
    "rehype-unwrap-images": "^1.0.0",
    "remark-gfm": "^4.0.1",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4.1.14",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@typescript-eslint/eslint-plugin": "^8.15",
    "@typescript-eslint/parser": "^8.15",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.4.5",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-prettier": "^5.5.3",
    "eslint-plugin-simple-import-sort": "^12.1.1",
    "postcss": "^8.5.6",
    "prettier": "^3.6.2",
    "sass": "^1.89.2",
    "tailwindcss": "^4.1.14",
    "typescript": "^5"
  }
}
</file>

</files>
